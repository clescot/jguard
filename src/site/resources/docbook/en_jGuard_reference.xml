<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
        "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book lang="en">
    <title>jGuard reference documentation</title>

    <bookinfo>
        <releaseinfo>2.0.0</releaseinfo>

        <authorgroup>
            <author>
                <firstname>Charles</firstname>

                <surname>Gay</surname>
            </author>

            <author>
                <firstname>In√°cio</firstname>

                <surname>Ferrarini</surname>
            </author>

            <corpauthor>jGuard team</corpauthor>
        </authorgroup>
    </bookinfo>

    <toc></toc>

    <chapter>
        <title>introduction to jGuard</title>

        <warning>
            <para>this documentation refers to the
                <productnumber>2.0.x</productnumber>
                product line.For earlier releases,
                please consult the documentation (as a
                <productname>maven</productname>
                web site) shipped with the downloaded bundle.
            </para>
        </warning>

        <sect1>
            <title>Overview</title>

            <para>jGuard provides EASY security (authentication and authorization)
                in web and standalone applications. It is built over the stable and
                mature JAAS framework, which is part of the JAVA J2SE apis.
            </para>
        </sect1>

        <sect1>
            <title>License</title>

            <para>jGuard is licensed under the GNU Lesser General Public Licence
                (formerly known as LGPL). you can obtain a copy of the LGPL licence on
                <ulink url="http://www.gnu.org/copyleft/lesser.html">the gnu project web
                    site</ulink>.
            </para>
        </sect1>

        <sect1>
            <title>Features</title>

            <para>
                <itemizedlist>
                    <listitem>
                        <para>Only requires java 5.0 and j2ee 1.3 or higher</para>
                    </listitem>

                    <listitem>
                        <para>Can be adapted to any webapp, on any application
                            server
                        </para>
                    </listitem>

                    <listitem>
                        <para>Permits a user to have more than one role
                            simultaneously
                        </para>
                    </listitem>

                    <listitem>
                        <para>Does not depend on a web framework, or an AOP
                            framework
                        </para>
                    </listitem>

                    <listitem>
                        <para>Built on top of the standard, very secure, and flexible
                            JAAS
                        </para>
                    </listitem>

                    <listitem>
                        <para>Authentication and authorization are handled by pluggable
                            mechanisms
                        </para>
                    </listitem>

                    <listitem>
                        <para>Authentication data stored in a database, an XML file, a
                            <ulink url="http://java.sun.com/products/jndi/">JNDI</ulink>
                            datasource, an LDAP directory,<ulink
                                    url="http://java.sun.com/products/jndi/">Kerberos</ulink>...
                        </para>
                    </listitem>

                    <listitem>
                        <para>Changes take effects 'on the fly' (dynamic
                            configuration)
                        </para>
                    </listitem>

                    <listitem>
                        <para>Permissions, roles, and their associations can be created,
                            updated, deleted on the fly through a webapp (an API is provided
                            too)
                        </para>
                    </listitem>

                    <listitem>
                        <para>Each webapp has its own authentication and authorization
                            configuration
                        </para>
                    </listitem>

                    <listitem>
                        <para>A taglib is provided to protect jsp fragments</para>
                    </listitem>

                    <listitem>
                        <para>Support security manager</para>
                    </listitem>
                </itemizedlist>
                jGuard is composed of 9 libraries :
            </para>

            <itemizedlist>
                <listitem>
                    <para>jGuard-core: it contains the main jGuard features.</para>
                </listitem>

                <listitem>
                    <para>jGuard-ext : it handles specific authentication and
                        authorization managers such as XML or JDBC based managers. It also
                        embeds login modules like JDBC or jCaptcha.
                    </para>
                </listitem>

                <listitem>
                    <para>jGuard-ext-java-6: a java 6 library</para>
                </listitem>

                <listitem>
                    <para>jGuard-jee : library is dedicated for web applications.</para>
                </listitem>

                <listitem>
                    <para>jGuard-jee-4: a jee 4 library</para>
                </listitem>

                <listitem>
                    <para>jGuard-jee-extras: library dedicated to add security features
                        to some specific web thrid part libraries like DWR (ajax
                        library).
                    </para>
                </listitem>

                <listitem>
                    <para>jGuard-struts-example: webapp example to ilustrate jGuard use
                        if you've chosen Struts as your web framework
                    </para>
                </listitem>

                <listitem>
                    <para>jGuard-jsf-example: webapp example to ilustrate jGuard use if
                        you've chosen JSF MyFaces as your web framework
                    </para>
                </listitem>
            </itemizedlist>

            <figure>
                <title>jguard libraries dependencies and purposes</title>

                <mediaobject>
                    <imageobject>
                        <imagedata contentdepth="30em" contentwidth="36em"
                                   fileref="jGuardLibraries.jpg" format="JPG"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </sect1>
    </chapter>

    <chapter>
        <title>controlling jGuard log output</title>

        <sect1>
            <title>logging in jGuard</title>

            <para>jGuard relies on the
                <ulink url="http://www.slf4j.org/">
                    <productname>SLF4J</productname>
                </ulink>
                library (Simple Logging Facade
                for Java). it acts as an indirection between jGuard and the logging
                library you use (i.e
                <ulink url="http://logging.apache.org/log4j/">
                    <productname>log4J</productname>
                </ulink>
                , java.util.logging,
                <ulink
                        url="http://logback.qos.ch/">
                    <productname>logback</productname>
                </ulink>
                ,
                <ulink url="http://www.x4juli.org/">
                    <productname>x4juli</productname>
                </ulink>
                ).
            </para>

            <para>SLF4J requires for jGuard to use the
                <literal>slf4j-api.jar</literal>
                archive,
                <emphasis>and</emphasis>
                for
                the end-user of jGuard, to import in its application one more jar
                depending the logging library he uses (
                <literal>slf4j-logj12.jar</literal>
                for log4j,
                <literal>slf4j-jdk14.jar</literal>
                for java.util.logging,
                <literal>logback-classic.jar</literal>
                for logback).
            </para>

            <remark>it is required to import in your project the
                <literal>slf4j-api.jar archive AND a bridge library related to the
                    logging framework you use.
                </literal>
            </remark>

            <para>Each logging library has its own advantages over others. for
                example, LOG4J is the older one and can be evaluated as a very
                <emphasis>stable</emphasis>
                library. java.util.logging is the
                <emphasis>standard</emphasis>
                implementation (shipped in J2SE 1.4 or
                higher).x4juli permits to
                <emphasis>remove some limitations</emphasis>
                of java.util.logging on the JEE field , and can be used in conjunction
                with java.util.logging.LogBack add some new features among others. it
                seems to be the
                <emphasis>most innovative</emphasis>
                library.
            </para>

            <note>
                <para>one 'advanced' feature present in the java.util.logging' package
                    which is not present in other libraries, is to restrict logging output
                    based on<ulink
                            url="http://java.sun.com/j2se/1.5.0/docs/api/java/util/logging/LoggingPermission.html">
                        LoggingPermission</ulink>: if a user or a library want to output some
                    informations with the SecurityManager enabled on the java platform, it
                    needs to have granted the related
                    <ulink
                            url="http://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/LoggingPermission.html">
                        <classname>LoggingPermission</classname>
                    </ulink>
                    .
                </para>
            </note>

            <note>
                <para>x4juli permits to extends limitations of the logging facility
                    shipped in java .4 and beyond, especially by controlling logging
                    configuration per classloader. Like each webapp has its own
                    classloader in a JEE application server (if you use the JEE official
                    'parent-last' class loading mechanism in your application server), you
                    have the ability to customize logging feature per webapp.
                </para>
            </note>
        </sect1>

        <sect1>
            <title>debugging Java Security</title>

            <note>
                <para>thi section is excerpted from chapter 1 of
                    <ulink
                            url="http://www.oreilly.com/catalog/javasec2/chapter/ch01.html">
                        <citetitle>java Security published</citetitle>
                        by O'Reilly editions
                    </ulink>
                </para>
            </note>

            <para>the Java Security contains a logging mechanism which permits to
                trace easily all the underlying security events which occurs.This
                mechanism is especially very useful to debug Authentication and
                Authorization decisions made in jGuard through JAAS.This mechainsm can
                be enabled byt a System property called
                <literal>java.security.debug</literal>
                which can have the following
                values:
            </para>

            <itemizedlist>
                <listitem>
                    <para>all</para>

                    <para>Turn on all the debugging options.</para>
                </listitem>

                <listitem>
                    <para>access</para>

                    <para>Trace all calls to the
                        <methodname>checkPermission</methodname>( ) method of the
                        <classname>AccessController</classname>. This allows you to see
                        which permissions your code is requesting, which calls are
                        succeeding, and which ones are failing.This option has the following
                        sub-options separated by a semi-colon (:). If no sub-option is
                        specified, then all are in force:
                    </para>

                    <itemizedlist>
                        <listitem>
                            <para>stack</para>

                            <para>Dump the stack every time a permission is checked.</para>
                        </listitem>

                        <listitem>
                            <para>failure</para>

                            <para>Dump the stack only when a permission is denied.</para>
                        </listitem>

                        <listitem>
                            <para>domain</para>

                            <para>Dump the protection domain in force when a protection is
                                checked.
                            </para>
                        </listitem>

                        <listitem>
                            <para>jar</para>

                            <para>When processing a signed jar file, print the signatures in
                                the file, their certificates, and the classes to which they
                                apply.
                            </para>
                        </listitem>

                        <listitem>
                            <para>policy</para>

                            <para>Print information about policy files as they are parsed,
                                including their location in the filesystem, the permissions they
                                grant, and the certificates they use for signed code.
                            </para>
                        </listitem>

                        <listitem>
                            <para>scl</para>

                            <para>Print information about the permissions granted directly
                                by a secure class loader (rather than granted through a policy
                                file).
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>

            <example>
                <title>parameter with access option activated with the failure
                    sub-option.
                </title>

                <programlisting>-Djava.security.debug=access:failure</programlisting>
            </example>

            <example>
                <title>parameter with scl and access</title>

                <programlisting>-Djava.security.debug=scl,access</programlisting>
            </example>

            <caution>
                <para>this facility should only used for debug purpose , because it
                    will generate so many traces and will slow your application
                    server.
                </para>
            </caution>
        </sect1>
    </chapter>

    <chapter>
        <title>security architecture</title>

        <sect1>
            <title>securing an application</title>

            <para>securing an application should be done with an<emphasis>Access
                Control Model</emphasis>. widely used access control models are
                described in a dedicated chapter.
            </para>

            <para>To apply an access control model in a java application, you have
                these choices:
            </para>

            <itemizedlist>
                <listitem>
                    <para>use java security infrastructure (through jAAS)</para>
                </listitem>

                <listitem>
                    <para>use security implementation by the application server if
                        you're in a jee context
                    </para>
                </listitem>

                <listitem>
                    <para>reinvent the wheel</para>
                </listitem>
            </itemizedlist>

            <sect2>
                <title>java security architecture</title>

                <sect3>
                    <title>java security roots</title>

                    <para>overall Java security stands on the
                        <classname>
                            java.lang.SecurityManager
                        </classname>
                        implementation in place on
                        the<acronym>JVM</acronym>, and on the java.security file located in
                        in<literal>${java.home}/lib/security/</literal>.
                    </para>
                </sect3>

                <sect3>
                    <title>overall architecture</title>

                    <sect4>
                        <title></title>

                        <mediaobject>
                            <imageobject>
                                <imagedata contentdepth="500px" contentwidth="43em"
                                           fileref="jguard_architecture.jpeg" format="JPEG"/>
                            </imageobject>
                        </mediaobject>

                        <para>One application need to have an
                            <emphasis>Authentication</emphasis>
                            part and an
                            <emphasis>Authorization</emphasis>
                            part initialized. It implies
                            for the authentication part, a
                            <emphasis>javax.security.auth.Configuration</emphasis>
                            instance
                            defined, and for the Authorization part a
                            <emphasis>java.security.Policy</emphasis>instance (or an isolated
                            part of an instance). jGuard provides a single point of access
                            with its PolicyEnforcementPoint.
                        </para>

                        <note>
                            <para>in a
                                <acronym>JEE</acronym>
                                environement, Authentication
                                and Authorization parts are set by the
                                <classname>ContextListener</classname>
                                class from jGuard.
                            </para>
                        </note>

                        <para>Specific technology parts are minimized. So, integrating a
                            new technology in jGuard implies implementing a
                            <emphasis>Technology anchor</emphasis>, an
                            <emphasis>AuthorizationBindings</emphasis>
                            implementation, and
                            eventually an<emphasis>AuthenticationBindings</emphasis>(not
                            always needed if authentication is done via another technology
                            anchor and scopes).
                        </para>

                        <para>jGuard provides also some
                            <emphasis>management</emphasis>
                            APIs for the Authentication Part
                            (<emphasis>AuthenticationManager</emphasis>), and for the
                            Authorization part
                            (<emphasis>AuthorizationManager</emphasis>).
                        </para>
                    </sect4>

                    <sect4>
                        <title>one application to bring them all</title>

                        <mediaobject>
                            <imageobject>
                                <imagedata contentdepth="30em" contentwidth="36em"
                                           fileref="multipleTechnologyAnchors.jpeg"/>
                            </imageobject>
                        </mediaobject>

                        <para>jGuard permits for one application, to use different
                            technology anchors simultaneously. It implies that they
                            <emphasis>share</emphasis>
                            the same Configuration and Policy (i.e
                            Authentication and Authorization parts). You can see on the above
                            diagram, that all technology anchors provided by jGuard, uses each
                            one a PolicyEnforcementPoint instance.this class acts as a Single
                            Point of Access.
                        </para>

                        <caution>
                            <para>be aware that to<emphasis>secure access of your
                                application</emphasis>, you need to configure technology anchors
                                to force all users to pass through them to access to protected
                                resources. For example, in a webapp, you need to configure the
                                <filename>web.xml</filename>
                                file to enforce user to access to a
                                technology anchor before reach the desired resource.
                            </para>
                        </caution>
                    </sect4>
                </sect3>
            </sect2>
        </sect1>

        <sect1>
            <title>Which jGuard security scopes?</title>

            <sect2>
                <title>jGuard and jee users</title>

                <para>jGuard envisions 3 types of "users" in a J2EE environment:
                    <itemizedlist>
                        <listitem>
                            <para>administrator</para>
                        </listitem>

                        <listitem>
                            <para>webapp developer</para>
                        </listitem>

                        <listitem>
                            <para>webapp user</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </sect2>

            <sect2>
                <title>security scopes</title>

                <para>jGuard provides two Security scopes, on authentication and
                    authorization. these scopes affect jGuard
                    <classname>javax.security.auth.login.Configuration</classname>
                    and
                    <classname>java.security.policy</classname>
                    implementations.
                </para>

                <sect3>
                    <title>local security scope</title>

                    <note>
                        <para>this scope permits to have isolate security per classloader;
                            <abbrev>i.e</abbrev>
                            is mainly dedicated to jee
                            applications.
                        </para>
                    </note>

                    <para>'local' authentication provides a good security level. It
                        allows protection of the webapp resources against webapp users. Each
                        webapp user will be authenticated, and access control will be
                        provided according to his roles. This authentication configuration
                        will not protect webapp developers against webapp developers of
                        others webapps, or administrators.
                    </para>

                    <para>The authentication configuration is easier, because everything
                        should be configured in the web.xml. There is no need to configure
                        things on the JVM side. Security is present after the first webapp
                        which uses jGuard is loaded by the application server. This security
                        level is reliable for these use cases:
                        <itemizedlist>
                            <listitem>
                                <para>The webapp is used to test jGuard</para>
                            </listitem>

                            <listitem>
                                <para>There is only one webapp on the application
                                    server
                                </para>
                            </listitem>

                            <listitem>
                                <para>There are multiple webapps on the same application
                                    servers, and there are 'friendly' each others
                                </para>
                            </listitem>

                            <listitem>
                                <para>One 'friendly' webapp is loaded firstly</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </sect3>

                <sect3>
                    <title>jvm security scope</title>

                    <para>'advanced' configuration allows for a more secure environment,
                        but is more difficult to configure: in jee environment, You must
                        install two jars: one for the webapp, and one dedicated to the
                        JVM-side.some bootclasspath tricks are needed too.
                    </para>

                    <para>This configuration allows for protection of webapp resources
                        against users like the 'usual' configuration; i.e to protect webapp
                        developers against others webapps, and to protect administrator
                        against any webapp developers. The administrator of the machine
                        should also restrict the java rights to protect against the
                        application sever administrator. This configuration is highly
                        secure, and should be used by hosting companies.
                    </para>

                    <para>This is a<literal>cascading security delegation
                        model</literal>:
                    </para>

                    <itemizedlist>
                        <listitem>
                            <para>webapp users are controlled by webapps</para>
                        </listitem>

                        <listitem>
                            <para>webapps are isolated from others webapps (others webapps
                                cannot make tedamages)
                            </para>
                        </listitem>

                        <listitem>
                            <para>webapps are controlled by the application server
                                administrator which configure the JVM security
                            </para>
                        </listitem>

                        <listitem>
                            <para>The application server administrator is controlled by the
                                operating system administrator which assign restricted rights to
                                java
                            </para>
                        </listitem>

                        <listitem>
                            <para>the operating system administrator security relies on BIOS
                                security, which relies on the physical machine security.
                            </para>

                            <para>To have this very secured configuration, you must enable
                                the<classname>SecurityManager</classname>.
                            </para>
                        </listitem>
                    </itemizedlist>
                </sect3>
            </sect2>
        </sect1>

        <sect1>
            <title>debugging</title>

            <para>for security reason, jGuard prevent by default, the application to
                throw to the end-user a
                <literal>java.lang.Throwable</literal>
                (i.e a
                <literal>java.lang.Exception</literal>
                or a
                <literal>java.lang.Error</literal>) instance, and its included stack
                trace: it permits to restrain sensitive information included in the
                stack trace, like the libraries you use, name of classes and methods and
                so on....
            </para>

            <para>But, in the development stage, it can be useful to inhibit this
                default mechanism, for a quicker diagnostic when a problem is present.
                it can be done by including the parameters of the
                <literal>technology
                    anchor
                </literal>
                (like the
                <classname>AccessFilter</classname>
                in
                servlet-related anchor, or the
                <classname>AccessListener</classname>
                for
                the JSF-based one),a
                <literal>propagateThrowable</literal>
                option to
                <literal>true</literal>.
            </para>
        </sect1>

        <sect1>
            <title>configuration files</title>

            <sect2>
                <title>configuration files used in every context (standalone and web
                    applications)
                </title>

                <sect3>
                    <title>jGuardFilter.xml</title>

                    <para>goals of this configuration file is to define:</para>

                    <itemizedlist>
                        <listitem>
                            <para>resources where the user is dispatched depending on the
                                Access Control check result
                            </para>
                        </listitem>

                        <listitem>
                            <para>authentication schemes used with the specific technology
                                anchor
                            </para>
                        </listitem>

                        <listitem>
                            <para>specific parameters for the CallbackHandler
                                implementation
                            </para>
                        </listitem>
                    </itemizedlist>

                    <sect4>
                        <title>authentication schemes</title>

                        <para>Authentication schemes are defined as the mechanisms used to
                            transmit credentials from the user (browser for webapps) to the
                            server. These credentials are used on the server to authenticate
                            the user in its backend. They can be configured in the
                            <markup>authScheme</markup>
                            markup.
                            <caution>
                                <para>to configure your authentication schemes, you DON'T have
                                    to configure your application server to use them (especially,
                                    you DON'T have to configure the
                                    <markup>&lt;login-config&gt;</markup>
                                    markup in the
                                    <filename>web.xml</filename>, and its related
                                    <markup>&lt;auth-method&gt;</markup>
                                    and
                                    <markup>&lt;realm-name&gt;</markup>
                                    markup). jGuard replace
                                    the specific mechanisms used in your application server, to
                                    grab credentials and compute them to authenticate the
                                    user.
                                </para>
                            </caution>
                            <itemizedlist>
                                <listitem>
                                    <para>
                                        <literal>FORM</literal>
                                        authentication
                                    </para>

                                    <para>since its inception, jGuard support the
                                        <literal>FORM</literal>
                                        authentication scheme. Credentials
                                        are sent from the browser to the application server through
                                        an HTML form.
                                    </para>

                                    <para>some special URIs are involved in this authentication
                                        scheme:
                                    </para>

                                    <itemizedlist>
                                        <listitem>
                                            <para>logonURI</para>

                                            <para>this URI is used to access to the page which
                                                contains the form used to authenticate. This URI is
                                                granted to ALL users.
                                            </para>
                                        </listitem>

                                        <listitem>
                                            <para>logonProcessURI</para>

                                            <para>this URI is used to send to the server the
                                                credentials to authenticate. This URI is granted to ALL
                                                users.
                                            </para>
                                        </listitem>

                                        <listitem>
                                            <para>loginField</para>

                                            <para>HTML field in the HTML authentication form, used
                                                to store your login. This special field is trapped by
                                                the accessFilter to grab this credential.
                                            </para>
                                        </listitem>

                                        <listitem>
                                            <para>passwordField</para>

                                            <para>HTML field in the HTML authentication form, used
                                                to store your password. This special field is trapped by
                                                the accessFilter to grab this credential.
                                            </para>
                                        </listitem>
                                    </itemizedlist>

                                    <example>
                                        <title>how to configure FORM authentication</title>

                                        <programlisting>&lt;authScheme&gt;FORM&lt;/authScheme&gt;</programlisting>
                                    </example>
                                </listitem>

                                <listitem>
                                    <para>BASIC authentication</para>

                                    <para>jGuard support BASIC authentication. Some special URIs
                                        are involved in this authentication scheme:
                                    </para>

                                    <itemizedlist>
                                        <listitem>
                                            <para>logonProcessURI</para>

                                            <para>this URI is used to send to the server the
                                                credentials to authenticate. This URI is granted to ALL
                                                users.
                                            </para>
                                        </listitem>
                                    </itemizedlist>

                                    <example>
                                        <title>how to configure BASIC authentication</title>

                                        <programlisting>&lt;authScheme&gt;BASIC&lt;/authScheme&gt;</programlisting>
                                    </example>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>Digest</literal>
                                        Authentication
                                    </para>

                                    <para>this authentication scheme is not yet supported.a
                                        feature request has been posted on the jGuard bug tracking
                                        system hosted on sourceforge.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>CLIENT_CERT</literal>
                                        authentication
                                    </para>

                                    <para>jGuard support
                                        <literal>CLIENT_CERT</literal>
                                        authentication.
                                    </para>

                                    <example>
                                        <title>how to configure CLIENT_CERT authentication</title>

                                        <programlisting>
                                            &lt;authScheme&gt;CLIENT_CERT&lt;/authScheme&gt;</programlisting>
                                    </example>

                                    <note>
                                        <para>jGuard use its own mechanisms involved in
                                            authentication schemes. But it uses the
                                            <acronym>SSL</acronym>
                                            mechanism provided by the
                                            application server, in the case of
                                            <literal>CLIENT-CERT</literal>
                                            authentication. So, you
                                            have to configure your
                                            <filename>web.xml</filename>
                                            file
                                            with this markup:
                                        </para>

                                        <programlisting>&lt;security-constraint&gt;
                                            &lt;web-resource-collection&gt;
                                            &lt;web-resource-name&gt;all the webapp&lt;/web-resource-name&gt;
                                            &lt;description&gt;&lt;/description&gt;
                                            &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
                                            &lt;/web-resource-collection&gt;
                                            &lt;user-data-constraint&gt;
                                            &lt;description&gt;This part requires SSL&lt;/description&gt;
                                            &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
                                            &lt;/user-data-constraint&gt;
                                            &lt;/security-constraint&gt;</programlisting>
                                    </note>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </sect4>

                    <sect4>
                        <title>example</title>

                        <example>
                            <title>jGuardFilter.xml example</title>

                            <programlisting>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
                                &lt;!DOCTYPE configuration SYSTEM "jGuardFilter_1.1.0.dtd"&gt;
                                &lt;configuration&gt;
                                &lt;!-- Index uri of your web application. --&gt;
                                &lt;authenticationSucceedURI&gt;/index.jsp&lt;/authenticationSucceedURI&gt;
                                &lt;!-- Uri when the user authentication failed. --&gt;
                                &lt;authenticationFailedURI&gt;/AuthenticationFailed.do&lt;/authenticationFailedURI&gt;
                                &lt;!-- Uri to access to the authentication form --&gt;
                                &lt;logonURI&gt;/Logon.do&lt;/logonURI&gt;
                                &lt;!-- uri to be authenticated. The action property of the authentication form MUST NOT
                                be set to j_security_check. --&gt;
                                &lt;logonProcessURI&gt;/LogonProcess.do&lt;/logonProcessURI&gt;
                                &lt;registerURI&gt;/Registration.do&lt;/registerURI&gt;
                                &lt;registerProcessURI&gt;/RegistrationProcess.do&lt;/registerProcessURI&gt;
                                &lt;!-- uri to to be unauthenticated --&gt;
                                &lt;logoffURI&gt;/Logoff.do&lt;/logoffURI&gt;
                                &lt;authScheme&gt;FORM&lt;/authScheme&gt;
                                &lt;loginField&gt;login&lt;/loginField&gt;
                                &lt;!-- Parameter's name of the form's field which holds the password. All values are
                                accepted except j_password. --&gt;
                                &lt;passwordField&gt;password&lt;/passwordField&gt;
                                &lt;goToLastAccessDeniedUriOnSuccess&gt;true&lt;/goToLastAccessDeniedUriOnSuccess&gt;
                                &lt;/configuration&gt;</programlisting>
                        </example>

                        <note>
                            <para>this configuration file specific to a web application is
                                used to define the
                                <literal>URI</literal>
                                used when to follow
                                jGuard Access control decisions. The location of this file is
                                specified in the<filename>web.xml</filename>, especially in the
                                <classname>AccessFilter</classname>
                                declaration in a
                                <literal>configurationLocation</literal>
                                parameter.
                            </para>
                        </note>

                        <note>
                            <para>the AccessDenied URI is not defined in jGuardFilter.xml
                                file, because it is already handled by the underlying protocol
                                ;HTTP maps it to the status code 401. To use your customized
                                accessDenied page, maps the error code in the web.xml file of
                                your webapp to its path.
                            </para>
                        </note>
                    </sect4>
                </sect3>

                <sect3>
                    <title>
                        <literal>
                            <filename>jGuardAuthentication.xml</filename>
                        </literal>
                    </title>

                    <para>goals of this configuration file is to define:
                        <itemizedlist>
                            <listitem>
                                <para>the authentication scope</para>
                            </listitem>

                            <listitem>
                                <para>the AuthenticationManager implementation</para>
                            </listitem>

                            <listitem>
                                <para>the loginmodules involved in the authentication process
                                    with their options and JAAS keywords (required, optional, and
                                    so on...)
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </sect3>

                <sect3>
                    <title>
                        <filename>jGuardAuthorization.xml</filename>
                    </title>

                    <para>goals of this configuration file is to define:
                        <itemizedlist>
                            <listitem>
                                <para>authorization scope</para>
                            </listitem>

                            <listitem>
                                <para>AuthorizationManager implementation</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </sect3>
            </sect2>
        </sect1>
    </chapter>

    <chapter>
        <title>java authentication</title>

        <sect1>
            <title>Overall Authentication part</title>

            <para>Authentication part is composed of the Authentication process,
                which is involved when user is not authenticated, and
                AuthenticationManager, which manage users and roles.they both share the
                same Authentication store.
            </para>

            <figure>
                <title>Authentication part in jGuard</title>

                <mediaobject>
                    <imageobject>
                        <imagedata contentdepth="500px" contentwidth="36em"
                                   fileref="authenticationPart.jpeg" format="JPEG"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </sect1>

        <sect1>
            <title>AuthenticationManager</title>

            <sect2>
                <title>description</title>

                <para>AuthenticationManager implementations aims to do Create, Read,
                    Update, Delete (<acronym>CRUD</acronym>) operations on users and roles
                    of the application. These Users and roles are present in the
                    datasource authentication. This datasource (database, XML and so
                    on..), is also the same one used for the
                    <literal>authentication
                        process
                    </literal>
                    which involve<classname>LoginContext</classname>,
                    <classname>Configuration</classname>
                    and
                    <classname>LoginModules</classname>.
                </para>

                <note>
                    <para>if the user does not tries to authenticate, jGuard
                        automatically authenticates you as the 'guest' user. it's not a
                        security issue, but a design choice. but to fulfills your security
                        requirements, you can configure that guest (unauthenticated users),
                        hasn't got access to your protected pages. how to do it? =&gt;
                        configure the 'guest' role with no permissions. the guest user will
                        only have access to login page and access denied page(access is
                        always grant to these resources).
                    </para>
                </note>
            </sect2>

            <sect2>
                <title>configuration</title>

                <para>Authentication configuration in jGuard, is done via the
                    <filename>jGuardAuthentication.xml</filename>
                    file.
                </para>

                <para>goals of this configuration file is to:
                    <itemizedlist>
                        <listitem>
                            <para>define the authentication scope</para>
                        </listitem>

                        <listitem>
                            <para>define the AuthenticationManager implementation</para>
                        </listitem>

                        <listitem>
                            <para>define the loginmodules involved in the
                                <literal>authentication process</literal>
                                with their options and
                                JAAS keywords (required, optional, and so on...)
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </sect2>

            <sect2>
                <title>implementations</title>

                <sect3>
                    <title>XMLAuthenticationManager</title>

                    <sect4>
                        <title>description</title>

                        <para>This AuthenticationManager implementation permits to persist
                            in a XML file all the auithentication informations of your
                            application.
                        </para>
                    </sect4>

                    <sect4>
                        <title>parameters</title>

                        <itemizedlist>
                            <listitem>
                                <para>debug</para>

                                <para>This optional parameter, when set to
                                    <literal>true</literal>, activate the debug mode (provide more
                                    logs to detect easily misconfiguration).
                                </para>
                            </listitem>

                            <listitem>
                                <para>authenticationXmlFileLocation</para>

                                <para>a relative path from the webapp, of the
                                    <filename>jGuardUsersPrincipals.xml</filename>
                                    file.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </sect4>

                    <sect4>
                        <title>usual configuration in the
                            <filename>jGuardConfiguration.xml</filename>
                            file
                        </title>

                        <para>
                            <programlisting>....
                                ....
                                &lt;authenticationManager&gt;net.sf.jguard.authentication.XmlAuthenticationManager&lt;/authenticationManager&gt;
                                &lt;authenticationManagerOptions&gt;
                                &lt;option&gt;
                                &lt;name&gt;authenticationXmlFileLocation&lt;/name&gt;
                                &lt;value&gt;WEB-INF/conf/jGuard/jGuardUsersPrincipals.xml&lt;/value&gt;
                                &lt;/option&gt;
                                &lt;/authenticationManagerOptions&gt;
                                ....
                                ....
                            </programlisting>
                        </para>
                    </sect4>
                </sect3>

                <sect3>
                    <title>HibernateAuthenticationManager</title>

                    <note>
                        <para>The
                            <classname>JdbcAuthenticationManager</classname>
                            has
                            been replaced by the
                            <classname>HibernateAuthenticationManager</classname>
                            for a better
                            flexibility. A further
                            <classname>JPAAuthenticationManager</classname>,
                            <acronym>ORM</acronym>
                            agnostic
                            <classname>AuthenticationManager</classname>
                            implementation, can
                            be another suitable solution provided in a future release.
                        </para>
                    </note>

                    <sect4>
                        <title>description</title>

                        <para>This
                            <classname>AuthenticationManager</classname>
                            implementation permits to persist in a database all the
                            authentication informations of your
                            application.HIerbnaetAuthenticationManager needs to use a
                            SessionFactory instance; here are the ways supported to grab the
                            sessionFactory
                        </para>

                        <itemizedlist>
                            <listitem>
                                <para>hibernate.cfg.xml</para>

                                <para>Hibernate can build and use a sessionFactory by reading
                                    an Hibernate.cfg.xml config file present on the
                                    classPath.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </sect4>

                    <sect4>
                        <title>parameters</title>

                        <itemizedlist>
                            <listitem>
                                <para>authenticationXmlFileLocation</para>

                                <para>WEB-INF/conf/jGuard/jGuardUsersPrincipals.xml for
                                    example . This parameter permits to import some data when your
                                    database is empty
                                </para>
                            </listitem>
                        </itemizedlist>
                    </sect4>

                    <sect4>
                        <title>configuration</title>

                        <para>
                            <programlisting>....
                                ....
                                &lt;authenticationManager&gt;net.sf.jguard.ext.authentication.manager.HibernateAuthenticationManager&lt;/authenticationManager&gt;
                                &lt;authenticationManagerOptions&gt;
                                &lt;option&gt;
                                &lt;name&gt;authenticationXmlFileLocation&lt;/name&gt;
                                &lt;value&gt;WEB-INF/conf/jGuard/jGuardUsersPrincipals.xml&lt;/value&gt;
                                &lt;/option&gt;
                                &lt;/authenticationManagerOptions&gt;
                                ....
                                ....
                            </programlisting>
                        </para>

                        <note>
                            <para>you have to configure the associated
                                HibernateLoginModule.
                            </para>
                        </note>
                    </sect4>

                    <sect4>
                        <title>ER Diagram</title>

                        <figure>
                            <title>authentication ER diagram</title>

                            <mediaobject>
                                <imageobject>
                                    <imagedata contentdepth="30em" contentwidth="36em"
                                               fileref="jguardERDiagram.jpg" format="JPG"/>
                                </imageobject>
                            </mediaobject>
                        </figure>
                    </sect4>
                </sect3>
            </sect2>
        </sect1>

        <sect1>
            <title>JAAS Authentication process</title>

            <para>Authentication process is standardized into java through the
                <acronym>JAAS</acronym>
                api. It involves the
                <classname>LoginContext</classname>
                class, a callbackHandler
                implementation, a
                <classname>Configuration</classname>
                instance, and
                some loginModules. jGuard provides
            </para>

            <sect2>
                <title>javax.security.auth.login.LoginContext</title>

                <para>This class is the main entry point to the Authentication
                    Process. it defines :
                </para>

                <itemizedlist>
                    <listitem>
                        <para>which Subject (user) authenticate</para>
                    </listitem>

                    <listitem>
                        <para>through which way (CallbackHandler)</para>
                    </listitem>

                    <listitem>
                        <para>for which application</para>
                    </listitem>

                    <listitem>
                        <para>with which authentication technologies (LoginModules)</para>
                    </listitem>

                    <listitem>
                        <para>in which mechanism (Configuration)</para>

                        <para>This class provides multiple constructors which permits to
                            build a convenient LoginContext class. Authentication is done
                            during the
                            <methodname>login</methodname>
                            method, which return an
                            authenticated<classname>Subject</classname>, or a
                            <classname>LoginException</classname>. when the user quit the
                            application, the
                            <methodname>logout</methodname>
                            method should to
                            be called.
                        </para>

                        <note>
                            <para>in webapps, jGuard provides some high-level classes to
                                reduce your work, and simplify the use of JAAS like the
                                AccessFilter servlet filter.
                            </para>
                        </note>
                    </listitem>
                </itemizedlist>
            </sect2>

            <sect2>
                <title>javax.security.auth.callback.CallbackHandler</title>

                <para>this class handle the way to grab informations contained into
                    information from a protocol, to fill callbacks (used by loginmodules)
                    to authenticate the user. So, LoginModules can use the same callbacks
                    but with different CallbackHandler depending on the situation. jGuard
                    provides different callbackHandler like
                    <classname>JMXCallbackHandler</classname>,
                    <classname>SwingCallbackHandler</classname>
                    ,and
                    <classname>HttpServletCallbackHandler.</classname>
                </para>
            </sect2>

            <sect2>
                <title>loginModules</title>

                <sect3>
                    <title>description</title>

                    <para>after the user transmits its credentials through the
                        authentication scheme, jGuard should authenticate the user with
                        them.to authenticate the user, jGuard use its credentials against
                        some security challenges: LoginModules.
                    </para>

                    <para>loginModules are stackable: you can configure multiple
                        loginModules (in the
                        <filename>jGuardConfiguration.xml</filename>
                        file),which will help you to authenticate a user or not.
                    </para>

                    <para>each loginModule has got a flag which can be
                        '<literal>REQUIRED</literal>','<literal>OPTIONAL</literal>','<literal>REQUISITE</literal>'
                        ou '<literal>SUFFICIENT</literal>' (
                        <acronym>JAAS</acronym>
                        documentation from<trademark>SUN</trademark>):
                    </para>

                    <itemizedlist>
                        <listitem>
                            <para>REQUIRED</para>

                            <para>The LoginModule is required to succeed. If it succeeds or
                                fails, authentication still continues to proceed down the
                                LoginModule list.
                            </para>
                        </listitem>

                        <listitem>
                            <para>REQUISITE</para>

                            <para>The LoginModule is required to succeed. If it succeeds,
                                authentication continues down the LoginModule list.If it fails,
                                control immediately returns to the application (authentication
                                does not proceed down the LoginModule list).
                            </para>
                        </listitem>

                        <listitem>
                            <para>SUFFICIENT</para>

                            <para>The LoginModule is not required to succeed. If it does
                                succeed, control immediately returns to the application
                                (authentication does not proceed down the LoginModule list).If
                                it fails, authentication continues down the LoginModule
                                list.
                            </para>
                        </listitem>

                        <listitem>
                            <para>OPTIONAL</para>

                            <para>The LoginModule is not required to succeed. If it succeeds
                                or fails, authentication still continues to proceed down the
                                LoginModule list.
                            </para>
                        </listitem>
                    </itemizedlist>

                    <note>
                        <para>You should have noticed that the configuration for
                            loginModules involved in validating user identity is very small:
                            configuration already defined in
                            <classname>AuthenticationManager</classname>
                            are reused to
                            establish connections in loginmodules. so,
                            <classname>JdbcLoginmodule</classname>
                            uses
                            <classname>JdbcAuthenticationManager</classname>
                            configuration to
                            establish database connections and so on‚Ä¶
                        </para>
                    </note>
                </sect3>

                <sect3>
                    <title>jGuard loginModules</title>

                    <sect4>
                        <title>UserLoginModule</title>

                        <para>This loginModule is an
                            <literal>abstract</literal>
                            class.
                            its subclasses grab informations in various locations
                            (database,LDAP,Xml and so on...) to authenticate users.
                        </para>

                        <note>
                            <para>stores are configured into AuthenticationManager
                                implementations and are reused by UserLoginModule subclasses.So,
                                you don't have to declare stores into UserLoginModule
                                subclasses.
                            </para>
                        </note>
                    </sect4>

                    <sect4>
                        <title>XMLLoginModule</title>

                        <sect5>
                            <title>description</title>

                            <para>This Loginmodule inherit from UserLoginmodule and use
                                users and roles located in an XML file called
                                <filename>jGuardUsersPrincipals.xml</filename>
                                to authenticate
                                users.
                            </para>
                        </sect5>

                        <sect5>
                            <title>parameters</title>

                            <itemizedlist>
                                <listitem>
                                    <para>debug</para>

                                    <para>This optional parameter, when set to
                                        <literal>true</literal>, activate the debug mode (provide
                                        more logs to detect easily misconfiguration).
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </sect5>

                        <sect5>
                            <title>XMLLoginModule declaration</title>

                            <para>
                                <example>
                                    <title>configuration of XMLLoginModule into a fragment of
                                        jGuardAuthentication.xml
                                    </title>

                                    <para>to reference XMLLoginModule, you have to declare it
                                        into
                                        <filename>jGuardAuthentication.xml</filename>
                                        file.
                                    </para>

                                    <programlisting>....
                                        ....
                                        &lt;authentication&gt;
                                        &lt;loginModules&gt;
                                        &lt;loginModule&gt;
                                        &lt;name&gt;net.sf.jguard.ext.authentication.loginmodules.XmlLoginModule&lt;/name&gt;
                                        &lt;flag&gt;REQUIRED&lt;/flag&gt;
                                        &lt;loginModuleOptions&gt;
                                        &lt;option&gt;
                                        &lt;name&gt;debug&lt;/name&gt;
                                        &lt;value&gt;false&lt;/value&gt;
                                        &lt;/option&gt;
                                        &lt;/loginModuleOptions&gt;
                                        &lt;/loginModule&gt;
                                        &lt;/loginModules&gt;
                                        &lt;/authentication&gt;
                                        ....
                                        ....
                                    </programlisting>
                                </example>
                            </para>
                        </sect5>

                        <sect5>
                            <title>jGuardUsersPrincipals.xml example</title>

                            <para>
                                <example>
                                    <title>jGuardUsersPrincipals.xml example</title>

                                    <programlisting>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
                                        &lt;authentication
                                        xmlns="http://jguard.sourceforge.net/xsd/jGuardUsersPrincipals_2.0.0.xsd"
                                        xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
                                        xs:schemaLocation="http://jguard.sourceforge.net/xsd/jGuardUsersPrincipals_2.0.0.xsd
                                        jGuardUsersPrincipals_1.1.0.xsd"&gt;
                                        &lt;principals&gt;
                                        &lt;principal&gt;
                                        &lt;name&gt;admin&lt;/name&gt;
                                        &lt;class&gt;net.sf.jguard.core.authorization.permissions.RolePrincipal&lt;/class&gt;
                                        &lt;applicationName&gt;jguard-struts-example&lt;/applicationName&gt;
                                        &lt;organizationRef&gt;myenterpriseId&lt;/organizationRef&gt;
                                        &lt;/principal&gt;
                                        &lt;principal&gt;
                                        &lt;name&gt;guest&lt;/name&gt;
                                        &lt;class&gt;net.sf.jguard.core.authorization.permissions.RolePrincipal&lt;/class&gt;
                                        &lt;applicationName&gt;jguard-struts-example&lt;/applicationName&gt;
                                        &lt;organizationRef&gt;system&lt;/organizationRef&gt;
                                        &lt;/principal&gt;
                                        &lt;principal&gt;
                                        &lt;name&gt;role3&lt;/name&gt;
                                        &lt;class&gt;net.sf.jguard.core.authorization.permissions.RolePrincipal&lt;/class&gt;
                                        &lt;applicationName&gt;anotherApplication&lt;/applicationName&gt;
                                        &lt;organizationRef&gt;system&lt;/organizationRef&gt;
                                        &lt;/principal&gt;
                                        &lt;/principals&gt;
                                        &lt;users&gt;
                                        &lt;user&gt;
                                        &lt;privateCredentials&gt;
                                        &lt;credential&gt;
                                        &lt;id&gt;login&lt;/id&gt;
                                        &lt;value&gt;admin&lt;/value&gt;
                                        &lt;/credential&gt;
                                        &lt;credential&gt;
                                        &lt;id&gt;password&lt;/id&gt;
                                        &lt;value&gt;admin&lt;/value&gt;
                                        &lt;/credential&gt;
                                        &lt;/privateCredentials&gt;

                                        &lt;publicCredentials&gt;
                                        &lt;credential&gt;
                                        &lt;id&gt;firstname&lt;/id&gt;
                                        &lt;value&gt;Rick&lt;/value&gt;
                                        &lt;/credential&gt;
                                        &lt;credential&gt;
                                        &lt;id&gt;lastname&lt;/id&gt;
                                        &lt;value&gt;Dangerous&lt;/value&gt;
                                        &lt;/credential&gt;
                                        &lt;credential&gt;
                                        &lt;id&gt;location&lt;/id&gt;
                                        &lt;value&gt;Paris&lt;/value&gt;
                                        &lt;/credential&gt;
                                        &lt;/publicCredentials&gt;

                                        &lt;principalsRef&gt;
                                        &lt;principalRef name="admin" applicationName="jguard-struts-example"
                                        definition="${subject.publicCredentials.location.contains('Paris')}"
                                        active="true"/&gt;
                                        &lt;principalRef name="role3" applicationName="anotherApplication"/&gt;
                                        &lt;/principalsRef&gt;
                                        &lt;organizationRef&gt;system&lt;/organizationRef&gt;
                                        &lt;/user&gt;
                                        &lt;user&gt;
                                        &lt;privateCredentials&gt;
                                        &lt;credential&gt;
                                        &lt;id&gt;login&lt;/id&gt;
                                        &lt;value&gt;guest&lt;/value&gt;
                                        &lt;/credential&gt;
                                        &lt;credential&gt;
                                        &lt;id&gt;password&lt;/id&gt;
                                        &lt;value&gt;guest&lt;/value&gt;
                                        &lt;/credential&gt;
                                        &lt;/privateCredentials&gt;
                                        &lt;publicCredentials/&gt;
                                        &lt;principalsRef&gt;
                                        &lt;principalRef name="guest" applicationName="jguard-struts-example" /&gt;
                                        &lt;/principalsRef&gt;
                                        &lt;organizationRef&gt;system&lt;/organizationRef&gt;
                                        &lt;/user&gt;
                                        &lt;/users&gt;
                                        &lt;organizations&gt;
                                        &lt;organizationTemplate&gt;
                                        &lt;userTemplate&gt;
                                        &lt;privateRequiredCredentials&gt;
                                        &lt;credTemplateId&gt;login&lt;/credTemplateId&gt;
                                        &lt;credTemplateId digestNeeded="true"&gt;password&lt;/credTemplateId&gt;
                                        &lt;/privateRequiredCredentials&gt;
                                        &lt;publicRequiredCredentials&gt;
                                        &lt;credTemplateId&gt;firstname&lt;/credTemplateId&gt;
                                        &lt;credTemplateId&gt;lastname&lt;/credTemplateId&gt;
                                        &lt;credTemplateId&gt;location&lt;/credTemplateId&gt;
                                        &lt;/publicRequiredCredentials&gt;
                                        &lt;privateOptionalCredentials&gt;
                                        &lt;credTemplateId&gt;country&lt;/credTemplateId&gt;
                                        &lt;credTemplateId&gt;religion&lt;/credTemplateId&gt;
                                        &lt;/privateOptionalCredentials&gt;
                                        &lt;publicOptionalCredentials&gt;
                                        &lt;credTemplateId&gt;hobbies&lt;/credTemplateId&gt;
                                        &lt;/publicOptionalCredentials&gt;
                                        &lt;principalsRef&gt;
                                        &lt;principalRef name="admin" applicationName="jguard-struts-example"/&gt;
                                        &lt;principalRef name="role3" applicationName="anotherApplication"/&gt;
                                        &lt;/principalsRef&gt;
                                        &lt;/userTemplate&gt;
                                        &lt;credentials&gt;
                                        &lt;credTemplateId&gt;id&lt;/credTemplateId&gt;
                                        &lt;/credentials&gt;
                                        &lt;principalsRef&gt;
                                        &lt;principalRef name="admin" applicationName="jguard-struts-example"/&gt;
                                        &lt;principalRef name="role3" applicationName="anotherApplication"/&gt;
                                        &lt;/principalsRef&gt;
                                        &lt;/organizationTemplate&gt;
                                        &lt;organization&gt;
                                        &lt;userTemplate&gt;
                                        &lt;privateRequiredCredentials&gt;
                                        &lt;credTemplateId&gt;login&lt;/credTemplateId&gt;
                                        &lt;credTemplateId digestNeeded="true"&gt;password&lt;/credTemplateId&gt;
                                        &lt;/privateRequiredCredentials&gt;
                                        &lt;publicRequiredCredentials&gt;
                                        &lt;credTemplateId&gt;firstname&lt;/credTemplateId&gt;
                                        &lt;credTemplateId&gt;lastname&lt;/credTemplateId&gt;
                                        &lt;credTemplateId&gt;location&lt;/credTemplateId&gt;
                                        &lt;/publicRequiredCredentials&gt;
                                        &lt;privateOptionalCredentials&gt;
                                        &lt;credTemplateId&gt;country&lt;/credTemplateId&gt;
                                        &lt;credTemplateId&gt;religion&lt;/credTemplateId&gt;
                                        &lt;/privateOptionalCredentials&gt;
                                        &lt;publicOptionalCredentials&gt;
                                        &lt;credTemplateId&gt;hobbies&lt;/credTemplateId&gt;
                                        &lt;/publicOptionalCredentials&gt;
                                        &lt;principalsRef&gt;
                                        &lt;principalRef name="admin" applicationName="jguard-struts-example"/&gt;
                                        &lt;principalRef name="role3" applicationName="anotherApplication"/&gt;
                                        &lt;/principalsRef&gt;
                                        &lt;/userTemplate&gt;
                                        &lt;credentials&gt;
                                        &lt;credential&gt;
                                        &lt;id&gt;id&lt;/id&gt;
                                        &lt;value&gt;system&lt;/value&gt;
                                        &lt;/credential&gt;
                                        &lt;credential&gt;
                                        &lt;id&gt;creation date&lt;/id&gt;
                                        &lt;value&gt;1965&lt;/value&gt;
                                        &lt;/credential&gt;
                                        &lt;/credentials&gt;
                                        &lt;principalsRef&gt;
                                        &lt;principalRef applicationName="jguard-struts-example" name="guest"/&gt;
                                        &lt;principalRef name="admin" applicationName="jguard-struts-example" /&gt;
                                        &lt;/principalsRef&gt;
                                        &lt;/organization&gt;
                                        &lt;/organizations&gt;
                                        &lt;/authentication&gt;</programlisting>
                                </example>
                            </para>
                        </sect5>
                    </sect4>

                    <sect4>
                        <title>HibernateLoginModule</title>

                        <sect5>
                            <title>description</title>

                            <para>This loginModule inherit from UserLoginmodule and allows a
                                database-based authentication for your application.
                            </para>
                        </sect5>

                        <sect5>
                            <title>parameters</title>

                            <itemizedlist>
                                <listitem>
                                    <para>debug</para>

                                    <para>This optional parameter, when set to
                                        <literal>true</literal>, activate the debug mode (provide
                                        more logs to detect easily misconfiguration).
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </sect5>

                        <sect5>
                            <title>HibernateLoginModule declaration</title>

                            <para>
                                <example>
                                    <title>configuration of HibernateLoginModule into a fragment
                                        of jGuardAuthentication.xml
                                    </title>

                                    <para>to reference HibernateLoginModule, you have to declare
                                        it into
                                        <filename>jGuardAuthentication.xml</filename>
                                        file.
                                    </para>

                                    <programlisting>....
                                        ....
                                        &lt;authentication&gt;
                                        &lt;loginModule&gt;
                                        &lt;name&gt;net.sf.jguard.ext.authentication.loginmodules.HibernateLoginModule&lt;/name&gt;
                                        &lt;!-- flag :'REQUIRED','OPTIONAL','REQUISITE' or 'SUFFICIENT' --&gt;
                                        &lt;flag&gt;REQUIRED&lt;/flag&gt;
                                        &lt;loginModuleOptions&gt;
                                        &lt;option&gt;
                                        &lt;name&gt;debug&lt;/name&gt;
                                        &lt;value&gt;false&lt;/value&gt;
                                        &lt;/option&gt;
                                        &lt;/loginModuleOptions&gt;
                                        &lt;/loginModule&gt;
                                        ....
                                        ....
                                    </programlisting>
                                </example>
                            </para>
                        </sect5>
                    </sect4>

                    <sect4>
                        <title>JNDILoginModule</title>

                        <sect5>
                            <title>description</title>

                            <para>this UserLoginModule subclass, authenticate users and
                                roles into a
                                <acronym>JNDI</acronym>
                                directory like
                                <acronym>LDAP</acronym>.
                            </para>

                            <para>most of the parameters detailed in this page comes from
                                the
                                <ulink
                                        url="http://java.sun.com/j2se/1.4.2/docs/api/javax/naming/Context.html">JNDI
                                    Context constants
                                </ulink>
                                detailed in the<ulink
                                        url="http://java.sun.com/j2se/1.4.2/docs/api/constant-values.html#javax.naming.Context.SECURITY_AUTHENTICATION">
                                    related JNDI javadoc</ulink>.
                            </para>

                            <note>
                                <para>this loginmodule does NOT yet retrieve roles from the
                                    directory. only authentication against credentials are
                                    supported. roles support will be rpovided in a future
                                    release.
                                </para>
                            </note>
                        </sect5>

                        <sect5>
                            <title>connections</title>

                            <para>connections can be established either through manual
                                configuration, or via application server JNDI lookup. for all
                                parameters, you have to include the prefix
                                ('<literal>preauth</literal>.' or '<literal>auth</literal>.').
                                these settings apply to
                                <literal>direct authentication</literal>
                                and
                                <literal>pre-authentication</literal>
                                modes.
                            </para>
                        </sect5>

                        <sect5>
                            <title>manual configuration</title>

                            <para>
                                <itemizedlist>
                                    <listitem>
                                        <para>initial context factory</para>

                                        <programlisting>.....
                                            &lt;option&gt;
                                            &lt;name&gt;preauth.java.naming.factory.initial&lt;/name&gt;
                                            &lt;value&gt;com.sun.jndi.ldap.LdapCtxFactory&lt;/value&gt;
                                            &lt;/option&gt;
                                            .....
                                        </programlisting>
                                    </listitem>

                                    <listitem>
                                        <para>provider url</para>

                                        <programlisting>.....
                                            &lt;option&gt;
                                            &lt;name&gt;preauth.java.naming.provider.url&lt;/name&gt;
                                            &lt;value&gt;ldap://mycompany.com:389&lt;/value&gt;
                                            &lt;/option&gt;
                                            .....
                                        </programlisting>
                                    </listitem>

                                    <listitem>
                                        <para>authentication mode</para>

                                        <para>you can use
                                            <literal>none</literal>
                                            ,
                                            <literal>simple</literal>
                                            or a
                                            <acronym>SASL</acronym>
                                            mechanism type defined in the<ulink
                                                    url="http://www.ietf.org/rfc/rfc2195.txt">RFC
                                                2195</ulink>.
                                        </para>

                                        <programlisting>.....
                                            &lt;option&gt;
                                            &lt;name&gt;java.naming.security.authentication&lt;/name&gt;
                                            &lt;value&gt;none&lt;/value&gt;
                                            &lt;/option&gt;
                                            .....
                                        </programlisting>
                                    </listitem>

                                    <listitem>
                                        <para>activate connection pooling</para>

                                        <para>you can sometimes activate the connection pooling of
                                            the JNDI service providers. if you use the one provided by
                                            sun, here is the configuration:
                                        </para>

                                        <programlisting>.....
                                            &lt;option&gt;
                                            &lt;name&gt;preauth.com.sun.jndi.ldap.connect.pool&lt;/name&gt;
                                            &lt;value&gt;true&lt;/value&gt;
                                            &lt;/option&gt;
                                            .....
                                        </programlisting>
                                    </listitem>

                                    <listitem>
                                        <para>define the preferred number of connections</para>

                                        <programlisting>.....
                                            &lt;option&gt;
                                            &lt;name&gt;preauth.com.sun.jndi.ldap.connect.pool.prefsize&lt;/name&gt;
                                            &lt;value&gt;5&lt;/value&gt;
                                            &lt;/option&gt;
                                            .....
                                        </programlisting>
                                    </listitem>

                                    <listitem>
                                        <para>define connection timout</para>

                                        <programlisting>.....
                                            &lt;option&gt;
                                            &lt;name&gt;preauth.com.sun.jndi.ldap.connect.pool.timeout&lt;/name&gt;
                                            &lt;value&gt;300000&lt;/value&gt;
                                            &lt;/option&gt;
                                            .....
                                        </programlisting>

                                        <para>this example defines the number of milliseconds (5
                                            minutes in this example) that an idle connection may
                                            remain in the pool without being closed and removed from
                                            the pool.
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>other connection pool settings</para>

                                        <para>other settings can be reached at the
                                            <ulink
                                                    url="http://java.sun.com/j2se/1.4.2/docs/guide/jndi/jndi-ldap.html#POOL">
                                                JNDI/LDAP Service provider documentation
                                            </ulink>
                                            page.
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>activate the Fast bind connection mode for Active
                                            Directory
                                        </para>

                                        <para>a specific LDAP control can be activated against
                                            Active Directory server. more details on it here: Active
                                            directory LDAP server fast bind mode documentation
                                        </para>

                                        <programlisting>.....
                                            &lt;option&gt;
                                            &lt;name&gt;preauth.fastBindConnection&lt;/name&gt;
                                            &lt;value&gt;true&lt;/value&gt;
                                            &lt;/option&gt;
                                            .....
                                        </programlisting>
                                    </listitem>
                                </itemizedlist>
                            </para>
                        </sect5>

                        <sect5>
                            <title>application server JNDI lookup</title>

                            <para>connections can be retrieved via the application servers
                                JNDI system. to specify which name must be used to grab the
                                context, you have to use after the prefix, the jndi name.
                                <programlisting>.....
                                    &lt;option&gt;
                                    &lt;name&gt;preauth.jndi&lt;/name&gt;
                                    &lt;value&gt;myDs&lt;/value&gt;
                                    &lt;/option&gt;
                                    .....
                                </programlisting>
                            </para>
                        </sect5>

                        <sect5>
                            <title>description</title>

                            <para>different use cases are possible, depending on how to find
                                the Distinguished Name(DN), which is the path to the user
                                Entry.this DN will be used to :
                            </para>

                            <itemizedlist>
                                <listitem>
                                    <para>authenticate the user</para>
                                </listitem>

                                <listitem>
                                    <para>grab its associated credentials.</para>
                                </listitem>
                            </itemizedlist>
                        </sect5>

                        <sect5>
                            <title>direct authentication (auth mode)</title>

                            <para>authentication parameters starts with the
                                '<literal>auth.</literal>' prefix. the
                                <acronym>DN</acronym>
                                is
                                known, directly from the
                                <literal>userDN</literal>
                                parameter and
                                the user login. for example,
                                <programlisting>....
                                    &lt;option&gt;
                                    &lt;name&gt;auth.userDN&lt;/name&gt;
                                    &lt;value&gt;dc=com,dc=mycompany,ou=mysection,cn={0}&lt;/value&gt;
                                    &lt;/option&gt;
                                    ....
                                </programlisting>
                            </para>

                            <para>the
                                <literal>{0}</literal>
                                will be replaced by the login
                                provided by the user.
                            </para>
                        </sect5>

                        <sect5>
                            <title>pre-authentication (preauth mode)</title>

                            <para>when the user
                                <acronym>DN</acronym>
                                cannot be known, a
                                first search should be done to know what is the
                                <acronym>DN</acronym>. authentication parameters starts with the
                                '<literal>preauth.</literal>' prefix.
                                <itemizedlist>
                                    <listitem>
                                        <para>base DN</para>

                                        <para>this parameter defines from which Distinguished Name
                                            (path) starts the search.
                                        </para>

                                        <programlisting>....
                                            &lt;option&gt;
                                            &lt;name&gt;preauth.search.base.dn&lt;/name&gt;
                                            &lt;value&gt;dc=mycompany,dc=com&lt;/value&gt;
                                            &lt;/option&gt;
                                            ....
                                        </programlisting>
                                    </listitem>

                                    <listitem>
                                        <para>search filter</para>

                                        <para>this parameter define the LDAP filter used to locate
                                            the DN of the user.
                                        </para>

                                        <programlisting>....
                                            &lt;option&gt;
                                            &lt;name&gt;preauth.search.filter&lt;/name&gt;
                                            &lt;value&gt;(&amp;(samAccountName={0})(!(proxyAddresses=*)))&lt;/value&gt;
                                            &lt;/option&gt;
                                            ....
                                        </programlisting>
                                    </listitem>

                                    <listitem>
                                        <para>search scope</para>

                                        <para>for object scope, use 0. for one level scope, use 1.
                                            for subtree scope, use 2.
                                        </para>

                                        <programlisting>....
                                            &lt;option&gt;
                                            &lt;name&gt;preauth.searchcontrols.searchscope&lt;/name&gt;
                                            &lt;value&gt;2&lt;/value&gt;
                                            &lt;/option&gt;
                                            ....
                                        </programlisting>
                                    </listitem>
                                </itemizedlist>
                            </para>
                        </sect5>

                        <sect5>
                            <title>which connection use to populate the Subject
                                (user)
                            </title>

                            <para>usually, jGuard reuses the connection used to authenticate
                                the user, to do a lookup on the user entry. sometimes, it can be
                                useful to grab the informations directly from the LDAP entry
                                found to know the user DN. to do it, you have to include this
                                parameter:
                                <programlisting>....
                                    &lt;option&gt;
                                    &lt;name&gt;contextforcommit&lt;/name&gt;
                                    &lt;value&gt;true&lt;/value&gt;
                                    &lt;/option&gt;
                                    ....
                                </programlisting>
                            </para>
                        </sect5>

                        <sect5>
                            <title>complete configuration example with
                                <literal>preauth</literal>
                            </title>

                            <para>in your
                                <filename>jGuardAuthentication.xml</filename>
                                file:
                                <programlisting>.......
                                    &lt;loginModule&gt;
                                    &lt;name&gt;net.sf.jguard.ext.authentication.loginmodules.JNDILoginModule&lt;/name&gt;
                                    &lt;flag&gt;REQUIRED&lt;/flag&gt;
                                    &lt;loginModuleOptions&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;preauth.java.naming.factory.initial&lt;/name&gt;
                                    &lt;value&gt;com.sun.jndi.ldap.LdapCtxFactory&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;preauth.java.naming.provider.url&lt;/name&gt;
                                    &lt;value&gt;ldap://yourcompany.com:389&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;java.naming.security.authentication&lt;/name&gt;
                                    &lt;value&gt;none&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;preauth.searchcontrols.searchscope&lt;/name&gt;
                                    &lt;value&gt;2&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;preauth.search.base.dn&lt;/name&gt;
                                    &lt;value&gt;dc=stuff,dc=com&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;preauth.search.filter&lt;/name&gt;
                                    &lt;value&gt;(&amp;(samAccountName={0})(!(proxyAddresses=*)))&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;auth.java.naming.factory.initial&lt;/name&gt;
                                    &lt;value&gt;com.sun.jndi.ldap.LdapCtxFactory&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;auth.java.naming.provider.url&lt;/name&gt;
                                    &lt;value&gt;ldap://yourcompany.com:389&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;auth.java.naming.security.authentication&lt;/name&gt;
                                    &lt;value&gt;simple&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;contextforcommit&lt;/name&gt;
                                    &lt;value&gt;true&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;/loginModuleOptions&gt;
                                    &lt;/loginModule&gt;
                                    .......
                                </programlisting>
                            </para>
                        </sect5>

                        <sect5>
                            <title>Direct Authentication configuration example</title>

                            <para>
                                <programlisting>.......
                                    &lt;loginModule&gt;
                                    &lt;name&gt;net.sf.jguard.ext.authentication.loginmodules.JNDILoginModule&lt;/name&gt;
                                    &lt;flag&gt;REQUIRED&lt;/flag&gt;
                                    &lt;loginModuleOptions&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;preauth.java.naming.factory.initial&lt;/name&gt;
                                    &lt;value&gt;com.sun.jndi.ldap.LdapCtxFactory&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;auth.java.naming.provider.url&lt;/name&gt;
                                    &lt;value&gt;ldap://168.12.45.88:389&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;auth.java.naming.security.authentication&lt;/name&gt;
                                    &lt;value&gt;simple&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;auth.java.naming.security.authentication&lt;/name&gt;
                                    &lt;value&gt;simple&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;com.sun.jndi.ldap.connect.pool&lt;/name&gt;
                                    &lt;value&gt;true&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;com.sun.jndi.ldap.connect.pool.prefsize&lt;/name&gt;
                                    &lt;value&gt;5&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;contextforcommit&lt;/name&gt;
                                    &lt;value&gt;false&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;option&gt;
                                    &lt;name&gt;auth.userDN&lt;/name&gt;
                                    &lt;value&gt;{0}&lt;/value&gt;
                                    &lt;/option&gt;
                                    &lt;/loginModuleOptions&gt;
                                    &lt;/loginModule&gt;
                                    .......
                                </programlisting>
                            </para>
                        </sect5>
                    </sect4>

                    <sect4>
                        <title>Certificate-based LoginModules</title>

                        <para>jGuard looks into the X509 Certificate provided by the user
                            and checks against the Certificate Authority its validity (with
                            the loginMoules described below). When the certicate is valid,
                            jGuard uses the informations present in it to populate the
                            <classname>javax.security.auth.Subject</classname>.
                            <note>
                                <para>jGuard only handle the first certificate provided by the
                                    user (theorically, a user can provide multiple certificates at
                                    the same time).
                                </para>
                            </note>
                        </para>

                        <itemizedlist>
                            <listitem>
                                <para>unique ID</para>

                                <para>If the certificate field
                                    <literal>subjectUniqueID</literal>
                                    is present in the
                                    certificate, jGuard create a credential called
                                    <literal>uniqueID</literal>
                                    in the
                                    <classname>javax.security.auth.Subject</classname>. this field
                                    is OPTIONAL in the certificate. jGuard use the method
                                    <methodname>getSubjectUniqueID</methodname>
                                    from the class
                                    <classname>java.security.cert.X509Certificate</classname>
                                    to
                                    grab this information.
                                </para>
                            </listitem>

                            <listitem>
                                <para>alternative names</para>

                                <para>if a
                                    <literal>SubjectAltName</literal>
                                    extension is
                                    present in the certificate, jGuard grab the subject
                                    alternatives names with the method
                                    <methodname>getSubjectAlternativeNames</methodname>, and
                                    create for each alternative name a credential with the name
                                    <literal>alternativeName#aSequenceNumber</literal>
                                    .
                                    <literal>SubjectAltName</literal>
                                    extension in certificate is
                                    OPTIONAL.
                                </para>
                            </listitem>

                            <listitem>
                                <para>X500 principal</para>

                                <para>jguard grab a principal object from the field
                                    <literal>subject</literal>
                                    in the certificate, with the method
                                    <methodname>getSubjectX500Principal</methodname>
                                    method,and
                                    put it into the
                                    <classname>Principals</classname>
                                    set of the
                                    <classname>Subject.</classname>
                                    <important>
                                        <para>this field in the certificate is REQUIRED.</para>

                                        <para>When you use the
                                            <classname>JdbcLoginmodule</classname>
                                            (or
                                            <classname>XmlLoginModule</classname>) in conjunction with
                                            a certificate-related loginModule, jGuard will check this
                                            value against the value of the credential called
                                            '<literal>login</literal>'.
                                        </para>
                                    </important>
                                </para>
                            </listitem>
                        </itemizedlist>

                        <sect5>
                            <title>what about certificate informations and other
                                LoginModules?
                            </title>

                            <para>you can use other loginModules like
                                <classname>XMLLoginModule</classname>
                                and
                                <classname>JdbcLoginmodule</classname>
                                in collaboration with
                                <classname>CRLLoginModule</classname>
                                or
                                <classname>OCSPLoginModule</classname>. in others authentication
                                schemes, i.e<literal>FORM</literal>,<literal>BASIC</literal>,
                                or<literal>DIGEST</literal>, the user actively send its login
                                and password informations. These informations are used by
                                <classname>XMLLoginModule</classname>
                                or
                                <classname>JdbcLoginmodule</classname>
                                to check if the user
                                eixsts and if its password is valid. after this step, it
                                populates the
                                <classname>Subject</classname>
                                with some
                                informations from the Datasource (XML or Database). with
                                <literal>CLIENT-CERT</literal>
                                authentication, the mechanism is
                                in the same way. the only difference is that the user
                                automatically send its login and other information with its
                                certificate. No password are required, because some powerful
                                cryptographic mechanisms check the validity of the certificate.
                                so, when the user transmit its certificate, jGuard populate the
                                Subject with a
                                <classname>X500Principal</classname>
                                object.
                                jGuard use the String returned by the
                                <methodname>getName</methodname>
                                method of the
                                <classname>X500Principal</classname>
                                stored in the
                                <classname>Subject</classname>
                                as the login information.
                            </para>
                        </sect5>

                        <sect5>
                            <title>what precise informations are required in the X509
                                certificate?
                            </title>

                            <para>to summarize, the only information required in the
                                certificate is the '<literal>subject</literal>' field. the value
                                of '<literal>subject</literal>' field should be a
                                '<literal>distinguished name</literal>' (DN), compliant with the
                                <ulink url="http://www.ietf.org/rfc/rfc2253.txt">RFC
                                    2253</ulink>. to have more informations on certificate
                                structure(which fields can be inserted), you can look towards
                                the<ulink url="http://www.ietf.org/rfc/rfc2459.txt">RFC
                                    2459</ulink>.
                            </para>
                        </sect5>
                    </sect4>

                    <sect4>
                        <title>CRLLoginModule</title>

                        <sect5>
                            <title>description</title>

                            <para>This loginModule permits an authentication based on X509
                                certificates: it validates their<literal>certPath</literal>, and
                                checks if some of them are revoked against a
                                <ulink
                                        url="http://en.wikipedia.org/wiki/Certificate_revocation_list">CRL
                                </ulink>
                                (Certificate Revocation List) which lists certificates
                                that has been revoked by the
                                <literal>Certificate Authority
                                </literal>
                                (CA) before their scheduled expiration date.
                                <note>
                                    <para>Note this certificate validation mechanism is not
                                        based on real-time mechanism: the accuracy of this mechanism
                                        is based on the
                                        <literal>CRL</literal>
                                        generation frequency
                                        of the Certificate Authority. If you authenticate
                                        successfully a user, but the CRL used to check it is too
                                        old, you will have a security threat.
                                    </para>
                                </note>
                            </para>
                        </sect5>

                        <sect5>
                            <title>parameters</title>

                            <para>These parameters comes from the
                                <ulink
                                        url="http://java.sun.com/j2se/1.4.2/docs/api/java/security/cert/PKIXParameters.html">
                                    <classname>PKIXParameters</classname>
                                </ulink>
                                java class:
                                parameters description comes from the JDK's javadoc.
                            </para>

                            <itemizedlist>
                                <listitem>
                                    <para>debug</para>

                                    <para>This optional parameter, when set to
                                        <literal>true</literal>, activate the debug mode (provide
                                        more logs to detect easily misconfiguration).
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>certPathAnyPolicyInhibited</para>

                                    <para>Sets state to determine if the any policy
                                        <acronym>OID</acronym>
                                        should be processed if it is included
                                        in a certificate. can be
                                        <literal>true</literal>
                                        or
                                        <literal>false</literal>, and default value is
                                        <literal>false</literal>
                                        if not set.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>certPathExplicitPolicyRequired</para>

                                    <para>If this flag is<literal>true</literal>, an acceptable
                                        policy needs to be explicitly identified in every
                                        certificate. default value is
                                        <literal>false</literal>.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>certPathPolicyMappingInhibited</para>

                                    <para>If this flag is<literal>true</literal>, policy mapping
                                        is inhibited. default value is
                                        <literal>false</literal>.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>certPathPolicyQualifiersRejected</para>

                                    <para>f this flag is<literal>true</literal>, certificates
                                        that include policy qualifiers in a certificate policies
                                        extension that is marked
                                        <literal>critical</literal>
                                        are
                                        rejected. If the flag is<literal>false</literal>,
                                        certificates are not rejected on this basis.Applications
                                        that want to use a more sophisticated policy must set this
                                        flag to<literal>false</literal>.Default value is
                                        <literal>true.</literal>
                                    </para>

                                    <note>
                                        <para>Note that the
                                            <acronym>PKIX</acronym>
                                            certification
                                            path validation algorithm specifies that any policy
                                            qualifier in a certificate policies extension that is
                                            marked
                                            <literal>critical</literal>
                                            must be processed and
                                            validated. Otherwise the certification path must be
                                            rejected. If the
                                            <literal>policyQualifiersRejected</literal>
                                            flag is set to
                                            false, it is up to the application to validate all policy
                                            qualifiers in this manner in order to be
                                            <acronym>PKIX</acronym>
                                            compliant.
                                        </para>
                                    </note>
                                </listitem>

                                <listitem>
                                    <para>certPathRevocationEnabled</para>

                                    <para>If this flag is<literal>true</literal>, the default
                                        revocation checking mechanism of the underlying
                                        <acronym>PKIX</acronym>
                                        service provider will be used. If
                                        this flag is<literal>false</literal>, the default revocation
                                        checking mechanism will be disabled (not used).When a
                                        PKIXParameters object is created, this flag is set
                                        to<literal>true</literal>. This setting reflects the most
                                        common strategy for checking revocation, since each service
                                        provider must support revocation checking to be
                                        <acronym>PKIX</acronym>
                                        compliant. Sophisticated
                                        applications should set this flag to
                                        <literal>false</literal>
                                        when it is not practical to use a
                                        <acronym>PKIX</acronym>
                                        service provider's default
                                        revocation checking mechanism or when an alternative
                                        revocation checking mechanism is to be substituted.Default
                                        value is<literal>true</literal>.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>certPathSigProvider</para>

                                    <para>Sets the signature provider's name. The specified
                                        provider will be preferred when creating Signature objects.
                                        If null or not set, the first provider found supporting the
                                        algorithm will be used.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>certPathCrlPath</para>

                                    <para>if this value is defined, it grabs the CRL from a file
                                        and add it to the CRLs collection. the value is a
                                        system-dependent fileName.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>certPathUrlCrlPath</para>

                                    <para>if this value is defined, it grabs the CRL from an
                                        <abbrev>HTTP</abbrev>
                                        URL and add it to the CRLs
                                        collection.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>trustedCaCertsDirPath</para>

                                    <para>this directory path must contain
                                        <literal>Trusted
                                            certificates
                                        </literal>
                                        to build<literal>Trust
                                            Anchors</literal>.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>securityProvider</para>

                                    <para>a security provider class name to use. default value
                                        is
                                        <classname>org.bouncycastle.jce.provider.BouncyCastleProvider.</classname>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>certPathCertStoreType</para>

                                    <para>define from which source the certstore will retrieve
                                        certificates and CRLs. value can be
                                        <literal>LDAP</literal>
                                        or
                                        <literal>Collection.</literal>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>certPathLdapServerName</para>

                                    <para>server name used to grab certificates and CRLS for the
                                        certstore.default value is
                                        <literal>localhost.</literal>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>certPathLdapServerPort</para>

                                    <para>server port used to grab certificates and CRLS for the
                                        <literal>certstore</literal>. default value is
                                        <literal>389</literal>.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>javax.net.ssl.trustStore</para>

                                    <para>file path of the<literal>trustStore</literal>.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>javax.net.ssl.trustStorePassword</para>

                                    <para>password protecting access to
                                        <literal>TrustStore</literal>
                                        data present in the
                                        file.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>keyStorePath</para>

                                    <para>file path of the<literal>keyStore</literal>.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>keyStorePassword</para>

                                    <para>password protecting access to
                                        <literal>keyStore</literal>
                                        data present in the file.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>keyStoreType</para>

                                    <para>Valid types can be those returned by the
                                        <literal>java.security.Security.getAlgorithms("KeyStore")</literal>
                                        attribute(<abbrev>JKS</abbrev>,<abbrev>JCEKS</abbrev>,<abbrev>PKCS12</abbrev>,
                                        <abbrev>PKCS11</abbrev>
                                        (Java crypto
                                        device),<abbrev>CMSKS</abbrev>,
                                        <abbrev>JCERACFKS</abbrev>
                                        ...)
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </sect5>
                    </sect4>

                    <sect4>
                        <title>OCSPLoginModule</title>

                        <sect5>
                            <title>description</title>

                            <para>This loginModule permits an authentication for your web
                                application based on X509 certificates: it validates their
                                <literal>certPath</literal>, and checks if some of them are
                                revoked against a
                                <abbrev>OCSP</abbrev>
                                mechanism. this
                                mechanism permits real-time certificate revocation check.
                            </para>
                        </sect5>

                        <sect5>
                            <title>parameters</title>

                            <itemizedlist>
                                <listitem>
                                    <para>ocspServerURL</para>

                                    <para>URL of the server which rpovide OCSP validation
                                        service .this parameter is mandatory.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>IssuerCACertLocation</para>

                                    <para>location of the certificate of the issuer Certificate
                                        Authority.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>OcspSignerCertLocation</para>

                                    <para>location of the certificate of the OCSP signer.</para>
                                </listitem>
                            </itemizedlist>
                        </sect5>

                        <sect5>
                            <title>OCSPLoginModule declaration</title>

                            <example>
                                <title>configuration of OCSPLoginModule into a fragment of
                                    jGuardAuthentication.xml
                                </title>

                                <para>
                                    <programlisting>‚Ä¶
                                        ‚Ä¶
                                        &lt;loginModule&gt;
                                        &lt;name&gt;net.sf.jguard.ext.authentication.loginmodules.OCSPLoginModule&lt;/name&gt;
                                        &lt;flag&gt;REQUIRED&lt;/flag&gt;
                                        &lt;loginModuleOptions&gt;
                                        &lt;option&gt;
                                        &lt;name&gt;debug&lt;/name&gt;
                                        &lt;value&gt;true&lt;/value&gt;
                                        &lt;/option&gt;
                                        &lt;option&gt;
                                        &lt;name&gt;ocspServerURL&lt;/name&gt;
                                        &lt;value&gt;http://127.0.0.1:8080/ejbca/publicweb/status/ocsp&lt;/value&gt;
                                        &lt;/option&gt;
                                        &lt;option&gt;
                                        &lt;name&gt;IssuerCACertLocation&lt;/name&gt;
                                        &lt;value&gt;/home/user/certificates/AdminCA1.der&lt;/value&gt;
                                        &lt;/option&gt;
                                        &lt;option&gt;
                                        &lt;name&gt;OcspSignerCertLocation&lt;/name&gt;
                                        &lt;value&gt;/home/user/certificates/AdminCA1.der&lt;/value&gt;
                                        &lt;/option&gt;
                                        &lt;/loginModuleOptions&gt;
                                        &lt;/loginModule&gt;
                                        ‚Ä¶
                                        ...
                                    </programlisting>
                                </para>
                            </example>
                        </sect5>
                    </sect4>

                    <sect4>
                        <title>JCaptchaLoginModule</title>

                        <sect5>
                            <title>description</title>

                            <para>since jGuard<productnumber>0.80</productnumber>, this
                                loginModule permits to validate a user against a
                                <acronym>CAPTCHA</acronym>
                                (Completely Automated Public Turing
                                test to tell Computers and Humans Apart), to determine if the
                                user is human or not.
                            </para>
                        </sect5>

                        <sect5>
                            <title>generate the Captcha</title>

                            <para>to use this loginModule, you need firstly to insert in
                                your login page, this kind of code to generate an image
                                containing the challenge:
                                <programlisting>&lt;img id="captcha" src="&lt;html:rewrite action='/Captcha.do'/&gt;" /&gt;</programlisting>
                            </para>

                            <para>note this code is used with the Struts framework, because
                                we use the html:rewrite taglib to generate the url to access to
                                the Captcha Action which will generate the image. but you can
                                use any framework to do the same thing. to permit the user to
                                answer to the challenge, you need also to insert in your login
                                form, the related fields:
                                <programlisting>&lt;div&gt;
                                    &lt;label for="captchaAnswer"&gt;captchaAnswer(required)&lt;/label&gt;
                                    &lt;input id="captchaAnswer" type="text" value="" size="30" name="captchaAnswer"
                                    tabindex="3" /&gt;
                                    &lt;/div&gt;</programlisting>
                            </para>
                        </sect5>

                        <sect5>
                            <title>validate the Captcha</title>

                            <para>to use this loginMoule, you need to insert in your
                                JGuardConfiguration.xml file, this declaration:
                                <programlisting>&lt;loginModule&gt;
                                    &lt;name&gt;net.sf.jguard.authentication.loginmodules.JCaptchaLoginModule&lt;/name&gt;
                                    &lt;flag&gt;REQUIRED&lt;/flag&gt;
                                    &lt;/loginModule&gt;</programlisting>
                                <note>
                                    <para>note that you can use other flags,depending on your
                                        needs.
                                    </para>
                                </note>
                            </para>
                        </sect5>

                        <sect5>
                            <title>Captcha library used</title>

                            <para>this loginModule use to generate and validate the Captcha,
                                the JCaptcha open source library. Note that the archive shipped
                                with the distribution is not the last release; we use only the
                                JCaptcha
                                <productnumber>1.0 RC2</productnumber>
                                release: since
                                the release<productnumber>1.0 RC3</productnumber>, the JCaptcha
                                project has changed its licence from
                                <abbrev>LGPL</abbrev>
                                to
                                <abbrev>GPL</abbrev>, which prevents us to ship it with jGuard
                                (licensed under the<abbrev>LGPL</abbrev>). But we've tested
                                jGuard with JCaptcha
                                <productnumber>1.0 RC3</productnumber>
                                or
                                higher successfully, so we advice you to use this JCaptcha
                                release if you accept that your application will be under the
                                <abbrev>GPL</abbrev>
                                umbrella.
                            </para>

                            <note>
                                <para>JCaptcha team has produced other releases under the LGPL
                                    licence.So, you can use these releases with jGuard, but be
                                    aware that JCaptcha need a Java 5 or higher JVM to
                                    work.
                                </para>
                            </note>
                        </sect5>

                        <sect5>
                            <title>CAPTCHA example</title>

                            <example>
                                <title>CAPTCHA example generated with JCaptcha</title>

                                <mediaobject>
                                    <imageobject>
                                        <imagedata fileref="SimpleListImageCaptchaEngineCaptcha_0.jpg"
                                                   format="JPG"/>
                                    </imageobject>
                                </mediaobject>
                            </example>
                        </sect5>
                    </sect4>

                    <sect4>
                        <title>implements your own loginModule</title>

                        <para>you can add your own loginModule on the authentication
                            loginModules list. To do it, you have to implements the
                            <classname>javax.security.auth.spi.LoginModule
                            </classname>interface.
                        </para>

                        <para>to authenticate a user against a store shipped with an
                            <classname>AuthenticationManager</classname>, you have to inherit
                            from
                            <classname>net.sf.jguard.core.authentication.loginmodules.UserLoginModule</classname>.
                        </para>
                    </sect4>
                </sect3>
            </sect2>

            <sect2>
                <title>javax.security.auth.login.Configuration</title>

                <para>this class defines which loginModules are involved in the
                    authentication process, for a defined application (identified by its
                    name). Each application has its own loginModules stack. With some
                    special keywords to customize the mechanism.
                </para>
            </sect2>

            <sect2>
                <title>javax.security.auth.Subject</title>

                <para>Object resulting from a successful authentication. it represents
                    a "real" entity like a user, a machine, and so on.... it contains some
                    <emphasis>Principals</emphasis>
                    and some
                    <emphasis>credentials</emphasis>
                    present in relative Sets.
                </para>

                <para>
                    <itemizedlist>
                        <listitem>
                            <para>Principals are often considered as Identities (one user
                                can have more than one identity) or roles.
                            </para>
                        </listitem>

                        <listitem>
                            <para>Credentials are user's attributes specific to him. it can
                                be a first name, a credit card number, a birth date....
                            </para>

                            <para>credentials are present either in a public credential Set
                                or a private credential set (access to them is protected by a
                                <classname>PrivateCredentialPermission</classname>).
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </sect2>

            <sect2>
                <title>java.security.Principal</title>

                <sect3>
                    <title>RolePrincipal</title>

                    <para>subject, which represents authenticated user, contains its own
                        credentials, and also some Principals. the main implementation of
                        principal provided in Subject by jGuard is
                        <classname>net.sf.jguard.core.authorization.permissions.RolePrincipal</classname>;
                        this class represent a<emphasis>role</emphasis>, a responsability
                        granted to the user.
                    </para>
                </sect3>

                <sect3>
                    <title>Organization</title>

                    <para>Another implementation provided is
                        <classname>net.sf.jguard.core.principals.Organization</classname>
                        ;it represents the entity which grants the user to use the
                        application.Every user has got an Organization and only one. This
                        feature permits to handle in your application multiple organization
                        support;<classname>RolePrincipal</classname>s are owned by
                        organization declared in your application.if no Organization are
                        declared, users are linked with a default organization.
                    </para>
                </sect3>
            </sect2>

            <sect2>
                <title>Dynamic role definition</title>

                <para>jGuard provides a mechanism that allows to automatically enable
                    or disable a role (RolePrincipal) based on user credentials. This
                    feature is defined in the attribute ‚Äúdefinition‚Äù of ‚ÄúprincipalRef‚Äù
                    tag. This attribute must evaluate ‚Äútrue‚Äù or ‚Äúfalse‚Äù. For example, we
                    could have in jGuardUsersPrincipals.xml the following:
                </para>

                <programlisting>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
                    &lt;authentication xmlns="http://jguard.sourceforge.net/xsd/jGuardUsersPrincipals_2.0.0.xsd"
                    xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
                    xs:schemaLocation="http://jguard.sourceforge.net/xsd/jGuardUsersPrincipals_2.0.0.xsd
                    jGuardUsersPrincipals_1.1.0.xsd"&gt;
                    &lt;principals&gt;
                    &lt;principal&gt;
                    &lt;name&gt;admin&lt;/name&gt;
                    &lt;class&gt;net.sf.jguard.core.authorization.permissions.RolePrincipal&lt;/class&gt;
                    &lt;applicationName&gt;jguard-struts-example&lt;/applicationName&gt;
                    &lt;organizationRef&gt;myenterpriseId&lt;/organizationRef&gt;
                    &lt;/principal&gt;
                    &lt;principal&gt;
                    &lt;name&gt;guest&lt;/name&gt;
                    &lt;class&gt;net.sf.jguard.core.authorization.permissions.RolePrincipal&lt;/class&gt;
                    &lt;applicationName&gt;jguard-struts-example&lt;/applicationName&gt;
                    &lt;organizationRef&gt;system&lt;/organizationRef&gt;
                    &lt;/principal&gt;
                    &lt;principal&gt;
                    &lt;name&gt;role3&lt;/name&gt;
                    &lt;class&gt;net.sf.jguard.core.authorization.permissions.RolePrincipal&lt;/class&gt;
                    &lt;applicationName&gt;anotherApplication&lt;/applicationName&gt;
                    &lt;organizationRef&gt;system&lt;/organizationRef&gt;
                    &lt;/principal&gt;
                    &lt;/principals&gt;
                    &lt;users&gt;
                    &lt;user&gt;
                    &lt;privateCredentials&gt;
                    &lt;credential&gt;
                    &lt;id&gt;login&lt;/id&gt;
                    &lt;value&gt;admin&lt;/value&gt;
                    &lt;/credential&gt;
                    &lt;credential&gt;
                    &lt;id&gt;password&lt;/id&gt;
                    &lt;value&gt;admin&lt;/value&gt;
                    &lt;/credential&gt;
                    &lt;/privateCredentials&gt;

                    &lt;publicCredentials&gt;
                    &lt;credential&gt;
                    &lt;id&gt;firstname&lt;/id&gt;
                    &lt;value&gt;Rick&lt;/value&gt;
                    &lt;/credential&gt;
                    &lt;credential&gt;
                    &lt;id&gt;lastname&lt;/id&gt;
                    &lt;value&gt;Dangerous&lt;/value&gt;
                    &lt;/credential&gt;
                    &lt;credential&gt;
                    &lt;id&gt;location&lt;/id&gt;
                    &lt;value&gt;Paris&lt;/value&gt;
                    &lt;/credential&gt;
                    &lt;/publicCredentials&gt;

                    &lt;principalsRef&gt;
                    &lt;principalRef name="admin" applicationName="jguard-struts-example"
                    definition="${subject.publicCredentials.location.contains('Paris')}" active="true"/&gt;
                    &lt;principalRef name="role3" applicationName="anotherApplication"/&gt;
                    &lt;/principalsRef&gt;
                    &lt;organizationRef&gt;system&lt;/organizationRef&gt;
                    &lt;/user&gt;
                    &lt;user&gt;
                    &lt;privateCredentials&gt;
                    &lt;credential&gt;
                    &lt;id&gt;login&lt;/id&gt;
                    &lt;value&gt;guest&lt;/value&gt;
                    &lt;/credential&gt;
                    &lt;credential&gt;
                    &lt;id&gt;password&lt;/id&gt;
                    &lt;value&gt;guest&lt;/value&gt;
                    &lt;/credential&gt;
                    &lt;/privateCredentials&gt;
                    &lt;publicCredentials/&gt;
                    &lt;principalsRef&gt;
                    &lt;principalRef name="guest" applicationName="jguard-struts-example" /&gt;
                    &lt;/principalsRef&gt;
                    &lt;organizationRef&gt;system&lt;/organizationRef&gt;
                    &lt;/user&gt;
                    &lt;/users&gt;
                    &lt;organizations&gt;
                    &lt;organizationTemplate&gt;
                    &lt;userTemplate&gt;
                    &lt;privateRequiredCredentials&gt;
                    &lt;credTemplateId&gt;login&lt;/credTemplateId&gt;
                    &lt;credTemplateId digestNeeded="true"&gt;password&lt;/credTemplateId&gt;
                    &lt;/privateRequiredCredentials&gt;
                    &lt;publicRequiredCredentials&gt;
                    &lt;credTemplateId&gt;firstname&lt;/credTemplateId&gt;
                    &lt;credTemplateId&gt;lastname&lt;/credTemplateId&gt;
                    &lt;credTemplateId&gt;location&lt;/credTemplateId&gt;
                    &lt;/publicRequiredCredentials&gt;
                    &lt;privateOptionalCredentials&gt;
                    &lt;credTemplateId&gt;country&lt;/credTemplateId&gt;
                    &lt;credTemplateId&gt;religion&lt;/credTemplateId&gt;
                    &lt;/privateOptionalCredentials&gt;
                    &lt;publicOptionalCredentials&gt;
                    &lt;credTemplateId&gt;hobbies&lt;/credTemplateId&gt;
                    &lt;/publicOptionalCredentials&gt;
                    &lt;principalsRef&gt;
                    &lt;principalRef name="admin" applicationName="jguard-struts-example"/&gt;
                    &lt;principalRef name="role3" applicationName="anotherApplication"/&gt;
                    &lt;/principalsRef&gt;
                    &lt;/userTemplate&gt;
                    &lt;credentials&gt;
                    &lt;credTemplateId&gt;id&lt;/credTemplateId&gt;
                    &lt;/credentials&gt;
                    &lt;principalsRef&gt;
                    &lt;principalRef name="admin" applicationName="jguard-struts-example"/&gt;
                    &lt;principalRef name="role3" applicationName="anotherApplication"/&gt;
                    &lt;/principalsRef&gt;
                    &lt;/organizationTemplate&gt;
                    &lt;organization&gt;
                    &lt;userTemplate&gt;
                    &lt;privateRequiredCredentials&gt;
                    &lt;credTemplateId&gt;login&lt;/credTemplateId&gt;
                    &lt;credTemplateId digestNeeded="true"&gt;password&lt;/credTemplateId&gt;
                    &lt;/privateRequiredCredentials&gt;
                    &lt;publicRequiredCredentials&gt;
                    &lt;credTemplateId&gt;firstname&lt;/credTemplateId&gt;
                    &lt;credTemplateId&gt;lastname&lt;/credTemplateId&gt;
                    &lt;credTemplateId&gt;location&lt;/credTemplateId&gt;
                    &lt;/publicRequiredCredentials&gt;
                    &lt;privateOptionalCredentials&gt;
                    &lt;credTemplateId&gt;country&lt;/credTemplateId&gt;
                    &lt;credTemplateId&gt;religion&lt;/credTemplateId&gt;
                    &lt;/privateOptionalCredentials&gt;
                    &lt;publicOptionalCredentials&gt;
                    &lt;credTemplateId&gt;hobbies&lt;/credTemplateId&gt;
                    &lt;/publicOptionalCredentials&gt;
                    &lt;principalsRef&gt;
                    &lt;principalRef name="admin" applicationName="jguard-struts-example"/&gt;
                    &lt;principalRef name="role3" applicationName="anotherApplication"/&gt;
                    &lt;/principalsRef&gt;
                    &lt;/userTemplate&gt;
                    &lt;credentials&gt;
                    &lt;credential&gt;
                    &lt;id&gt;id&lt;/id&gt;
                    &lt;value&gt;system&lt;/value&gt;
                    &lt;/credential&gt;
                    &lt;credential&gt;
                    &lt;id&gt;creation date&lt;/id&gt;
                    &lt;value&gt;1965&lt;/value&gt;
                    &lt;/credential&gt;
                    &lt;/credentials&gt;
                    &lt;principalsRef&gt;
                    &lt;principalRef applicationName="jguard-struts-example" name="guest"/&gt;
                    &lt;principalRef name="admin" applicationName="jguard-struts-example" /&gt;
                    &lt;/principalsRef&gt;
                    &lt;/organization&gt;
                    &lt;/organizations&gt;
                    &lt;/authentication&gt;</programlisting>

                <para>The application could provide a way to allow the user to change
                    its credential ‚ÄúloggedProject‚Äù between ‚ÄúProjectA‚Äù and ‚ÄúProjectB‚Äù. If
                    the users chooses ‚ÄúProjectA‚Äù, jGuard will automatically enable those
                    roles where attribute ‚Äúdefinition‚Äù evaluates ‚Äútrue‚Äù. You could use
                    more complex expressions using logical operators, for example:
                </para>

                <programlisting language="java">(subject.publicCredentials.loggedProject.contains('ProjectA') ||
                    subject.publicCredentials.loggedProject.contains('ProjectB')) &amp;&amp;
                    subject.privateCredentials.login.contains('userA')
                </programlisting>

                <sect3>
                    <title>synthax</title>

                    <para>jguard uses the jakarta commons JEXL project expression
                        library to provide expressiveness on contextual variables. this
                        project has got a syntax page:
                        http://jakarta.apache.org/commons/jexl/reference/syntax.html
                    </para>
                </sect3>

                <sect3>
                    <title>How to get/set role definition by code</title>

                    <para>You can get role definition using:</para>

                    <programlisting language="java">RolePrincipal ppal =
                        (RolePrincipal)AuthenticationManagerFactory.getAuthenticationManager().getRole(subject, role,
                        applicationName);
                        String roleDefinition = ppal.getDefinition();
                    </programlisting>

                    <para>And you can set role definition using:</para>

                    <programlisting language="java">
                        AuthenticationManagerFactory.getAuthenticationManager().updateRoleDefinition(subject, roleName,
                        applicationName, roleDefinition);
                    </programlisting>
                </sect3>
            </sect2>
        </sect1>

        <sect1>
            <title>password encryption</title>

            <sect2>
                <title>principle</title>

                <para>jGuard can use a
                    <ulink
                            url="http://en.wikipedia.org/wiki/Cryptographic_hash_function">cryptographic
                        hash function
                    </ulink>
                    to avoid password to be stored in clear on the
                    server. This function has the characteristic to produce a unique
                    digest of any string. So, a password '<literal>secret1</literal>' will
                    produce with one of these functions a digest like
                    '<literal>1gE1r</literal>'. a password '<literal>secret2</literal>'
                    will produce a digest like '<literal>sF42</literal>'. For each
                    password, a different digest will be produced. So,each original
                    password will have its unique digest.
                </para>

                <para>another characteristic is that it is very difficult to know
                    which password is the origin of a related digest . So, if we store
                    'digested' password and not the original, anyone which will read these
                    ones will not have the original password. But when we receive the
                    password from the end user, we calculate the digest of it, and compare
                    it with the one stored on the webapp using jGuard.
                </para>
            </sect2>

            <sect2>
                <title>supported algorithms</title>

                <para>
                    <literal>Cryptographic hash functions</literal>
                    also called
                    <literal>MessageDigest algorithms</literal>, are available in Java.
                    Different algorithms are supported. You need to refer to the
                    documentation of your JVM vendor, especially the
                    <literal>Java
                        Cryptography Architecture
                    </literal>
                    section. For example, many JVM
                    vendors provides these algorithms:
                </para>

                <itemizedlist>
                    <listitem>
                        <para>MD2</para>
                    </listitem>

                    <listitem>
                        <para>MD5</para>
                    </listitem>

                    <listitem>
                        <para>SHA-1</para>
                    </listitem>

                    <listitem>
                        <para>SHA-256</para>
                    </listitem>

                    <listitem>
                        <para>SHA-384</para>
                    </listitem>

                    <listitem>
                        <para>SHA-512</para>
                    </listitem>
                </itemizedlist>

                <para>Other ones are also available. To use one algorithm in jGuard,
                    you have to use the right code related to the algorithm chosen like
                    the ones listed above. To use this algorithm, you have to uncomment
                    the
                    <literal>digestAlgorithm</literal>
                    markup in the
                    <filename>jGuardAuthentication.xml</filename>
                    file and put into your
                    messageDigest algorithm code.
                    <programlisting>&lt;digestAlgorithm&gt;MD5&lt;/digestAlgorithm&gt;</programlisting>
                </para>
            </sect2>

            <sect2>
                <title>salted passwords</title>

                <para>password salting<ulink
                        url="http://en.wikipedia.org/wiki/Password_salting">is described on
                    wikipedia</ulink>. Password are impossible to know if you have only
                    their digest. But if you store the digest of some popular password and
                    the origin in some big tables, you can lookup easily the origin based
                    on the digest. These tables are called
                    <ulink
                            url="http://en.wikipedia.org/wiki/Rainbow_tables">
                        <literal>rainbow
                            tables
                        </literal>
                    </ulink>
                    .
                </para>

                <para>Password salting is used to prevent some attackers to use
                    rainbow tables. These tables are based on a known password origin. But
                    if you modify the origin with a '<literal>salt</literal>' specific to
                    your application, it will be impossible to create rainbow tables with
                    all the possibilities of salt.
                </para>

                <para>For example, if you concatenate '<literal>passord1</literal>'
                    with the salt '<literal>salt1</literal>' before to calculate the
                    digest, the result will be different and very difficult to know. To
                    use salt in conjunction of digest algorithm functions (you cannot only
                    use salt without digest algorithm), you have to uncomment in the
                    jGuardAuthentication.xml file the salt markup and put into it the salt
                    chosen. Be aware that sometimes, some rainbow tables also contains
                    some short salts. To be very safe, you should use long salts.
                    <programlisting>&lt;salt&gt;qsd846ss2q6ds4&lt;/salt&gt;</programlisting>
                </para>
            </sect2>
        </sect1>
    </chapter>

    <chapter>
        <title>Registration</title>

        <note>
            <para>Registration is an optional process in jGuard. to not use it,
                don't configure it.
            </para>
        </note>

        <sect1>
            <title>Configure the registration requirements</title>

            <para>when you want a user register in your application, you have to
                define which informations he need to fill in. for example, he need to
                provide a chosen login, a password, a first name, a last name and so
                on... but all these informations are not always
                <emphasis>required</emphasis>; some of them can be
                <emphasis>optional</emphasis>.In the same way, these informations can be
                either
                <emphasis>public</emphasis>
                or<emphasis>private</emphasis>; they
                can be read from anyone (first name ) or kept secret (credit card
                number). So, a
                <classname>subjectTemplate</classname>
                is not a user but
                a template for defining a user.
            </para>

            <para>these requirements are configured in your datasource (XML or
                database), and used to build a
                <classname>SubjectTemplate</classname>
                object too.
            </para>
        </sect1>

        <sect1>
            <title>validate the registration requirements</title>

            <para>during the registration, a user submit the required information to
                your application; these informations are used to build a user candidate.
                this candidate is also expressed as a
                <classname>SubjectTemplate.
                </classname>
            </para>

            <para>A
                <classname>subjectTemplate</classname>
                which define global
                requirements to register a user (must have for example a
                <literal>login</literal>
                and
                <literal>password</literal>
                and a
                <literal>city</literal>
                credential), is also used to validate other
                <classname>subjectTemplate</classname>
                which are user candidates.if
                <literal>credentials</literal>
                provided by the candidate user (expressed
                also as a<classname>SubjectTemplate</classname>), are not listed in the
                <classname>subjectTemplate</classname>, they will be ignored. if the
                credentials marked as<literal>required</literal>, are not provided,
                <emphasis>the registration will fails</emphasis>. The
                <classname>SubjectTemplate</classname>
                should also contains an
                '<literal>Identity</literal>' crendetial, which is a credential to
                uniquely identify a user(prevents identity stealth).
                <note>
                    <para>this autovalidation mechanism is also used with java
                        permissions with their '<methodname>implies</methodname>'
                        method.
                    </para>
                </note>
            </para>
        </sect1>
    </chapter>

    <chapter>
        <title>Java authorization</title>

        <sect1>
            <title>Authorization Mechanism</title>

            <sect2>
                <title>description</title>

                <para>Authorization part is involved to determine which
                    <literal>resources</literal>
                    will be accessible from an authenticated
                    user. jGuard uses an Access Control model which involves the use of
                    <literal>roles</literal>
                    <literal>domains</literal>
                    and
                    <literal>permissions</literal>
                    concepts.
                </para>

                <remark>Roles are present in authentication and authorization parts,
                    and represent the unique link between these two parts.
                </remark>

                <para>To configure authorization of your web application, you have to
                    :
                </para>

                <itemizedlist>
                    <listitem>
                        <para>defines your application resources</para>

                        <para>you can divide your application into resources by different
                            ways, depending on your architecture style and environment.
                        </para>

                        <itemizedlist>
                            <listitem>
                                <para>you want to prevent a user to execute a
                                    <literal>privileged code</literal>
                                </para>

                                <para>this privileged code can be in the local
                                    <abbrev>JVM</abbrev>
                                    or in another one (via
                                    <ulink
                                            url="http://en.wikipedia.org/wiki/Java_Remote_Method_Invocation">
                                        <abbrev>RMI</abbrev>
                                    </ulink>
                                    ,JINI, or Web service with SOAP,
                                    for example); your resources will be Java methods, i.e you
                                    want to prevent unauthorized users to execute some specific
                                    methods. This approach is<literal>Java code centric</literal>,
                                    and often used with standalone applications.
                                </para>

                                <para>For distributed applications, the
                                    <ulink
                                            url="http://en.wikipedia.org/wiki/Remote_procedure_call">
                                        <abbrev>RPC</abbrev>
                                    </ulink>
                                    architecture style aims to calls
                                    remote methods. This style tries to achieve call transparency
                                    by hiding the
                                    <literal>remote</literal>
                                    characteristic of the
                                    infrastructure. So, with
                                    <abbrev>RPC</abbrev>
                                    architecture
                                    like Java's<abbrev>RMI</abbrev>, client code thinks call code
                                    locally but remotely.
                                </para>
                            </listitem>

                            <listitem>
                                <para>you want to prevent a user to use a resource</para>

                                <para>this way is often used in web applications, by
                                    representing a resource with an<abbrev>URL</abbrev>. This
                                    architecture style is often known as the
                                    <acronym>REST</acronym>architecture style. So, you have to
                                    identify which URLs you want to protect (often all of
                                    them).
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>

                    <listitem>
                        <para>map your resources to permissions</para>

                        <para>Permissions are a
                            <literal>security view</literal>
                            of your
                            resources: it represents which actions you can do on your
                            resources. So, you can map one resource to a permission, or
                            multiple resources to a permission. You can protect your
                            application with any
                            <classname>java.security.permission</classname>
                            subclasses, either
                            permissions provided by
                            <abbrev>JDK</abbrev>
                            or jGuard, or custom
                            permissions subclasses implemented by you; jGuard will persist and
                            use any of them.
                        </para>

                        <para>which
                            <classname>java.security.permission</classname>
                            subclass use for the architecture style I've chosen?
                        </para>

                        <itemizedlist>
                            <listitem>
                                <para>to secure a privileged method, you can use any Business
                                    permission code by your own. For example, you can define a
                                    <classname>com.mycompany.security.AccountPermission</classname>
                                    subclass which will have a
                                    <literal>name</literal>
                                    (of the
                                    account) and
                                    <literal>actions</literal>
                                    (<methodname>getTotal</methodname>,
                                    <methodname>balance</methodname>
                                    and so on...).
                                </para>
                            </listitem>

                            <listitem>
                                <para>to secure resource, jGuard provides a permission
                                    implementation based on URL:
                                    <classname>URLPermission</classname>.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>

                    <listitem>
                        <para>defines the roles of your web application</para>

                        <para>you need to define which roles will use your application. a
                            role is a functional entity used to describe the activity of a set
                            of person which will use your application.
                        </para>

                        <note>
                            <para>a good practice is to define some roles
                                <literal>local</literal>
                                to your application. Sometimes, users
                                want to define roles with a scope
                                <literal>global</literal>
                                to
                                an enterprise : this work can be time-consuming and
                                unproductive. So, we think you should be aware before trying to
                                achieve this role unification across multiple
                                applications.
                            </para>
                        </note>
                    </listitem>

                    <listitem>
                        <para>map roles to permissions</para>
                    </listitem>
                </itemizedlist>

                <para>java.security.Policy,principal,permission....</para>

                <para>the default implementation provided delegates all security check
                    to the current
                    <classname>java.security.Policy</classname>
                    implementation.
                </para>
            </sect2>

            <sect2>
                <title>configuration</title>

                <para>Authorization configuration in jGuard, is done via the
                    <filename>jGuardAuthorization.xml</filename>
                    file.
                </para>

                <para>goals of this configuration file is to:
                    <itemizedlist>
                        <listitem>
                            <para>define the authorization scope</para>

                            <programlisting>&lt;scope&gt;local&lt;/scope&gt;</programlisting>
                        </listitem>

                        <listitem>
                            <para>enable/disable permission resolution caching
                                <programlisting>&lt;permissionResolutionCaching&gt;true&lt;/permissionResolutionCaching&gt;</programlisting>
                            </para>

                            <para>permission resolution expressions (used in contextual
                                permisisons) mechanism can be sometimes time-consuming. to
                                speed-up this mechanism, jGuard proposes to cache resolved
                                expressions, via the cache library
                                <ulink
                                        url="http://www.ehcache.sf.net">ehcache.
                                </ulink>
                            </para>

                            <remark>Sometimes, you can have some issues with caching
                                mechanism used by jGuard, if you use other libraries which
                                already use ehcache like
                                <ulink
                                        url="http://www.hibernate.org">Hibernate
                                </ulink>
                                for example.
                                To confirm this hypothesis, you have to inactivate cache
                                mechanism and see if it solves your problem (performances can be
                                lower, but not in a dramatic way).Ehcache need to be configured
                                only one time. to fix this issue, you can enable caching
                                mechanism in jGuard and include in the ehcache master
                                configuration file this configuration part (cache names need to
                                be followed strictly, but other parameters can be
                                tweaked):
                            </remark>

                            <programlisting>&lt;cache name = "unresolvedPermToNeededExpressions"
                                maxElementsInMemory="10000"
                                eternal="false"
                                overflowToDisk="false"
                                timeToIdleSeconds="120"
                                timeToLiveSeconds="120"
                                diskPersistent="false"
                                diskExpiryThreadIntervalSeconds="120"
                                /&gt;

                                &lt;cache name = "unresolvedPermAndValuesToResolvedPerm"
                                maxElementsInMemory="10000"
                                eternal="false"
                                overflowToDisk="false"
                                timeToIdleSeconds="120"
                                timeToLiveSeconds="120"
                                diskPersistent="false"
                                diskExpiryThreadIntervalSeconds="120"
                                /&gt;</programlisting>
                        </listitem>

                        <listitem>
                            <para>define the AuthorizationManager implementation and its
                                options
                            </para>

                            <programlisting>..........
                                &lt;authorizationManager&gt;net.sf.jguard.ext.authorization.manager.XmlAuthorizationManager&lt;/authorizationManager&gt;
                                &lt;authorizationManagerOptions&gt;
                                .....
                                &lt;/authorizationManagerOptions&gt;
                                ..........
                            </programlisting>
                        </listitem>
                    </itemizedlist>
                </para>
            </sect2>
        </sect1>

        <sect1>
            <title>AuthorizationManager</title>

            <sect2>
                <title>description</title>

                <para>AuthorizationManager implementations are dedicated to the web
                    applications developer.
                </para>
            </sect2>

            <sect2>
                <title>implementations</title>

                <sect3>
                    <title>XMLAuthorizationManager</title>

                    <sect4>
                        <title>description</title>

                        <para>this
                            <classname>AuthorizationManager</classname>
                            implementation permits an
                            <abbrev>XML</abbrev>
                            file authorization
                            method.
                        </para>
                    </sect4>

                    <sect4>
                        <title>parameters</title>

                        <itemizedlist>
                            <listitem>
                                <para>fileLocation</para>

                                <para>This parameter must be placed in the AccessFilter
                                    parameters list, in the web.xml file. The location must begin
                                    with the "file://" prefix. You should also use the
                                    "<varname>${java.home}</varname>" and the ${/} variables to
                                    have a more flexible configuration.
                                </para>

                                <example>
                                    <title>fileLocation parameter example</title>

                                    <programlisting>file://C:/jGuardPrincipalsPermissions.xml</programlisting>
                                </example>
                            </listitem>
                        </itemizedlist>
                    </sect4>
                </sect3>

                <sect3>
                    <title>JdbcAuthorizationManager</title>

                    <sect4>
                        <title>description</title>

                        <para>JdbcAuthorizationManager tries to connect to the needed
                            tables. If no one are found, it creates them automatically. Also,
                            it queries the tables to found data. If not data are found, it
                            insert into them data from the XML backend present in the same
                            directory.
                        </para>

                        <note>
                            <para>since
                                <productnumber>0.70</productnumber>
                                release, all
                                database-based
                                <classname>AuthorizationManager</classname>
                                have
                                been removed and replaced by
                                <classname>JdbcAuthorizationManager</classname>.
                            </para>
                        </note>
                    </sect4>

                    <sect4>
                        <title>parameters</title>

                        <itemizedlist>
                            <listitem>
                                <para>ApplicationName</para>
                            </listitem>

                            <listitem>
                                <para>fileLocation</para>

                                <para>location of the properties file corresponding to the
                                    database. This properties file contains SQL queries related to
                                    your database. The Oracle properties one, is valid for oracle
                                    9i and higher.
                                </para>

                                <example>
                                    <title>fileLocation example</title>

                                    <programlisting>file:///pathToMyConfigurationFile.properties</programlisting>
                                </example>
                            </listitem>

                            <listitem>
                                <para>authorizationUrl</para>

                                <para>a
                                    <acronym>JDBC</acronym>
                                    compliant URL used to connect
                                    directly to the database.
                                </para>

                                <example>
                                    <title>authorizationUrl example</title>

                                    <programlisting>jdbc:oracle:thin:@sweetHome.net:1521:dbName</programlisting>
                                </example>
                            </listitem>

                            <listitem>
                                <para>authorizationLogin</para>

                                <para>login used to connect to the database with the
                                    authorizationUrl.
                                </para>
                            </listitem>

                            <listitem>
                                <para>authorizationPassword</para>

                                <para>password used to connect to the database with the
                                    authorizationUrl.
                                </para>
                            </listitem>

                            <listitem>
                                <para>JNDI</para>

                                <para>JNDI name used to grab the datasource. This way is an
                                    alternative to the authorizationUrl.
                                </para>
                            </listitem>
                        </itemizedlist>

                        <note>
                            <para>the best way in a web application use case, is to use the
                                Datasource provided by the application server via JNDI, instead
                                of connecting directly with JDBC parameters to the database. If
                                your are in a web application use case, you should use the JNDI
                                parameter instead of the authorizationUrl, authorizationLogin
                                and authorizationPassword parameters.
                            </para>
                        </note>
                    </sect4>

                    <sect4>
                        <title>configuration with driver parameters</title>

                        <programlisting>&lt;configuration&gt;
                            &lt;authorization&gt;
                            &lt;!-- 'local' or 'jvm' --&gt;
                            &lt;scope&gt;local&lt;/scope&gt;
                            &lt;permissionResolutionCaching&gt;true&lt;/permissionResolutionCaching&gt;
                            &lt;authorizationManager&gt;net.sf.jguard.authorization.JdbcAuthorizationManager&lt;/authorizationManager&gt;
                            &lt;authorizationManagerOptions&gt;
                            &lt;option&gt;
                            &lt;name&gt;databaseDriver&lt;/name&gt;
                            &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;
                            &lt;/option&gt;
                            &lt;option&gt;
                            &lt;name&gt;databaseDriverUrl&lt;/name&gt;
                            &lt;value&gt;jdbc:mysql://10.0.0.10/jguardexample&lt;/value&gt;
                            &lt;/option&gt;
                            &lt;option&gt;
                            &lt;name&gt;databaseDriverLogin&lt;/name&gt;
                            &lt;value&gt;jguard&lt;/value&gt;
                            &lt;/option&gt;
                            &lt;option&gt;
                            &lt;name&gt;databaseDriverPassword&lt;/name&gt;
                            &lt;value&gt;jguard&lt;/value&gt;
                            &lt;/option&gt;
                            &lt;option&gt;
                            &lt;name&gt;authorizationXmlFileLocation&lt;/name&gt;
                            &lt;value&gt;WEB-INF/conf/jGuard/jGuardUsersPrincipals.xml&lt;/value&gt;
                            &lt;/option&gt;
                            &lt;option&gt;
                            &lt;name&gt;authorizationDatabaseFileLocation&lt;/name&gt;
                            &lt;value&gt;WEB-INF/conf/jGuard/authorization.mysql.properties&lt;/value&gt;
                            &lt;/option&gt;
                            &lt;/authorizationManagerOptions&gt;
                            &lt;/authorization&gt;
                            &lt;/configuration&gt;</programlisting>
                    </sect4>

                    <sect4>
                        <title>configuration with JNDI Datasource</title>

                        <programlisting>....
                            ....
                            &lt;authorizationManager&gt;net.sf.jguard.authorization.JdbcAuthorizationManager&lt;/authorizationManager&gt;
                            &lt;authorizationManagerOptions&gt;
                            &lt;option&gt;
                            &lt;name&gt;JNDI&lt;/name&gt;
                            &lt;value&gt;java:/comp/env/jguard&lt;/value&gt;
                            &lt;/option&gt;
                            &lt;/authorizationManagerOptions&gt;
                            ....
                            ....
                        </programlisting>
                    </sect4>

                    <sect4>
                        <title>DataModel</title>

                        <sect5>
                            <title>Tables and Fields</title>

                            <itemizedlist>
                                <listitem>
                                    <para>tables</para>

                                    <itemizedlist>
                                        <listitem>
                                            <para>jg_permission</para>
                                        </listitem>

                                        <listitem>
                                            <para>jg_domain</para>
                                        </listitem>

                                        <listitem>
                                            <para>jg_principal_domain</para>
                                        </listitem>

                                        <listitem>
                                            <para>jg_principal_permisison</para>
                                        </listitem>

                                        <listitem>
                                            <para>jg_app_principal</para>
                                        </listitem>

                                        <listitem>
                                            <para>jg_principal_hierarchy</para>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>

                                <listitem>
                                    <para>Table: jg_permission</para>

                                    <itemizedlist>
                                        <listitem>
                                            <para>id</para>

                                            <para>the permission¬¥s id.</para>
                                        </listitem>

                                        <listitem>
                                            <para>class</para>

                                            <para>java.security.Permission subclass used to build
                                                this permission.
                                            </para>
                                        </listitem>

                                        <listitem>
                                            <para>name</para>

                                            <para>name of this permission</para>
                                        </listitem>

                                        <listitem>
                                            <para>actions</para>

                                            <para>parameters of this permission</para>
                                        </listitem>

                                        <listitem>
                                            <para>domain_id</para>

                                            <para>domain which owns this permission</para>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>

                                <listitem>
                                    <para>Table: jg_domain</para>

                                    <itemizedlist>
                                        <listitem>
                                            <para>id</para>

                                            <para>the domain¬¥s id.</para>
                                        </listitem>

                                        <listitem>
                                            <para>name</para>

                                            <para>entities in a functional way this group of
                                                permissions.
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>

                                <listitem>
                                    <para>Table: jg_principal_domain</para>

                                    <itemizedlist>
                                        <listitem>
                                            <para>domain_id</para>

                                            <para>link to the domain by its id</para>
                                        </listitem>

                                        <listitem>
                                            <para>principal_id</para>

                                            <para>link to the principal by its id</para>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>

                                <listitem>
                                    <para>Table: jg_principal_permisison</para>

                                    <itemizedlist>
                                        <listitem>
                                            <para>permission_id</para>

                                            <para>link to the permission by its id</para>
                                        </listitem>

                                        <listitem>
                                            <para>principal_id</para>

                                            <para>link to the principal by its id</para>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>

                                <listitem>
                                    <para>Table: jg_app_principal</para>

                                    <itemizedlist>
                                        <listitem>
                                            <para>id</para>

                                            <para>id of principal</para>
                                        </listitem>

                                        <listitem>
                                            <para>name</para>

                                            <para>name of the principal</para>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>

                                <listitem>
                                    <para>Table: jg_principal_hierarchy</para>

                                    <itemizedlist>
                                        <listitem>
                                            <para>principal_asc_id</para>

                                            <para>id of one of its principal ascendants (in an
                                                <acronym>RBAC</acronym>
                                                meaning)
                                            </para>
                                        </listitem>

                                        <listitem>
                                            <para>principal_desc_id</para>

                                            <para>id of one of its principal descendants (in an RBAC
                                                meaning)
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>
                        </sect5>
                    </sect4>

                    <sect4>
                        <title>ER Diagram</title>

                        <figure>
                            <title>authorization ER diagram</title>

                            <mediaobject>
                                <imageobject>
                                    <imagedata fileref="???"/>
                                </imageobject>
                            </mediaobject>
                        </figure>
                    </sect4>
                </sect3>
            </sect2>
        </sect1>

        <sect1>
            <title>Permissions</title>

            <sect2>
                <title>description</title>

                <para></para>
            </sect2>

            <sect2>
                <title>URLPermission</title>

                <note>
                    <para>This permission is one possible way to protect webapp
                        resources, but is NOT the only one. You can represent webapp
                        resources by other java.security.permission subclasses, and handle
                        them with jGuard too. You can also mix URLPermission with other ones
                        to protect your webapp.
                    </para>
                </note>

                <sect3>
                    <title>Description</title>

                    <para>this permission represents the right to access through an URL
                        to a resource on a webapp.
                    </para>
                </sect3>

                <sect3>
                    <title>Build an URLPermission</title>

                    <para>URLPermission has got two constructors:</para>

                    <itemizedlist>
                        <listitem>
                            <para>one single argument constructor required by
                                <ulink
                                        url="http://java.sun.com/j2se/1.4.2/docs/api/java/security/Permission.html">the
                                    Abstract Permission class
                                </ulink>
                            </para>

                            <programlisting>public URLPermission(String name)</programlisting>

                            <para>this constructor cannot be used 'alone'. You should use
                                the method setActions too to complete the object.
                            </para>
                        </listitem>

                        <listitem>
                            <para>one two arguments constructor</para>

                            <para>this constructor should be preferred, because its
                                constructs a full URLPermission in one shot.
                            </para>

                            <programlisting language="java">public URLPermission(String name,String actions)
                            </programlisting>

                            <para>the name parameter permits to add to the newly created
                                permission, a custom name to remind it easily. The actions
                                parameter is a string which contains a list of actions separated
                                by ','(this constructor is required by<ulink
                                        url="http://java.sun.com/j2se/1.4.2/docs/api/java/security/BasicPermission.html">
                                    the BasicPermission abstract class</ulink>). Here are the
                                corresponding actions:
                            </para>

                            <itemizedlist>
                                <listitem>
                                    <para>uri</para>
                                </listitem>

                                <listitem>
                                    <para>scheme or protocol (optional, but required if
                                        description is present)
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>HTTP method (optional), among
                                        <literal>DELETE</literal>,<literal>GET</literal>,<literal>HEAD</literal>,
                                        <literal>OPTIONS</literal>,<literal>POST</literal>,<literal>PUT</literal>,
                                        <literal>TRACE</literal>, or<literal>ANY</literal>(all
                                        methods are authorized).If not method is defined,
                                        <literal>ANY</literal>
                                        is automatically set.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>description (optional)</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </sect3>

                <sect3>
                    <title>Usage</title>

                    <para>To use an<classname>URLPermission</classname>, basically you
                        deal with two methods:<methodname>implies()</methodname>and
                        <methodname>equals()</methodname>
                    </para>

                    <itemizedlist>
                        <listitem>
                            <para>
                                <methodname>implies()</methodname>
                            </para>

                            <para>When you create an URLPermission, its URI can be, for
                                example, in the form
                                <literal>http://someurl.domain</literal>
                                or
                                <literal>/someurl.do</literal>. However, you probably want to
                                use GET parameters on that URLs, like
                                <literal>http://someurl.domain?param1=value1&amp;param2=value2</literal>.
                                Here is the "trick" of<classname>URLPermission</classname>. When
                                you define a base URL for a permission, any permission derived
                                from it will be implied. If you have access to the base
                                URL<literal>http://someurl.domain</literal>, certainly you must
                                have access to the derived
                                <literal>http://someurl.domain?param1=value1</literal>. The
                                signature of implies() is:
                            </para>

                            <programlisting language="java">boolean implies(Permission p)</programlisting>

                            <para>Let's call basePerm the base URLPermission, and
                                derivedPerm the derived one. Using the URLs presented before, if
                                you execute:
                            </para>

                            <programlisting language="java">basePerm.implies(derivedPerm)</programlisting>

                            <para>It will return true. In another example, if you have an
                                URLPermission called perm1, with the URI
                                http://webapp/someurl.do, and another called perm2, with the URI
                                http://webapp/anotherurl.do:
                            </para>

                            <programlisting language="java">perm1.implies(perm2)</programlisting>

                            <para>Will return false, since perm2 cannot be derived from
                                perm1
                            </para>
                        </listitem>

                        <listitem>
                            <para>
                                <methodname>equals()</methodname>
                            </para>

                            <para>URLPermission has an own implementation of equals(), that
                                tests if a given URL is equals to the present one. To be equals,
                                the URL must have its name and URL (including parameters) with
                                the same values of the permission being compared. For example,
                                if you define 2 URLs as following:
                            </para>

                            <programlisting language="java">URLPermission perm_1 = new
                                URLPermission("url_1","http://someurl.domain/path1?param1=a&amp;param2=b");

                                URLPermission perm_2 = new URLPermission("url_2","http://someurl.domain/path1?param1=a&amp;param2=b");
                            </programlisting>

                            <para>Then:</para>

                            <programlisting language="java">perm_1.equals(perm_2)</programlisting>

                            <para>Will return false, because perm_1 has a different name of
                                perm_2 (url_1 != url_2). Note that parameters order doesn't
                                affect the equals mechanism on jGuard.
                            </para>

                            <programlisting language="java">URLPermission perm_1 = new
                                URLPermission("url_1","http://someurl.domain/path1?param1=a&amp;param2=b");

                                URLPermission perm_2 = new URLPermission("url_1","http://someurl.domain/path1?param2=b&amp;param1=a");
                            </programlisting>

                            <para>Then:</para>

                            <programlisting language="java">perm_1.equals(perm_2) return true</programlisting>
                        </listitem>

                        <listitem>
                            <para>using the star operator</para>

                            <para>when you define URLPermissions in your web applications,
                                you can think that this work is tedious: on big webapps, you can
                                have to create many URLPermissions. a trick to reduce the number
                                of URLPermissions is to use the star operator ,which implies all
                                the URI with the same starting sequence and any characters
                                placed after the last character before the star.
                            </para>

                            <programlisting language="java">URLPermission perm_1 = new
                                URLPermission("url_1","http://someurl.domain/path1*");

                                URLPermission perm_2 = new URLPermission("url_2","http://someurl.domain/path1234");

                                perm1.implies(perm2) return true
                            </programlisting>

                            <para>and:</para>

                            <programlisting language="java">URLPermission perm_1 = new
                                URLPermission("url_1","http://someurl.domain/pat*h1");

                                URLPermission perm_2 = new URLPermission("url_2","http://someurl.domain/path99999h1");

                                perm1.implies(perm2) return true
                            </programlisting>

                            <important>
                                <para>it is important to give a good attention on URL
                                    naming.
                                </para>
                            </important>
                        </listitem>

                        <listitem>
                            <para>URL parameters</para>

                            <para>If the URL permission is defined with a URI with no query
                                part, the permission implies any permission with
                                parameters.
                            </para>

                            <programlisting language="java">URLPermission perm_1 = new
                                URLPermission("url_1","http://someurl.domain/path");

                                URLPermission perm_2 = new URLPermission("url_2","http://someurl.domain/path?param1=a&amp;param2=b");

                                perm1.implies(perm2) return true
                            </programlisting>

                            <para>If the URI of the URLPermission contains a query part, the
                                permission implies only the permissions having the exact same
                                parameters
                            </para>

                            <programlisting language="java">URLPermission perm_1 = new
                                URLPermission("url_1","http://someurl.domain/path?param1=a");

                                URLPermission perm_2 = new URLPermission("url_2","http://someurl.domain/path?param1=a&amp;param2=b");

                                perm1.implies(perm2) return false
                            </programlisting>

                            <para>In order to allow at least the permission having the good
                                parameter defined but any values for any other parameter, use
                                &amp;* at the end of the query part of the URL
                            </para>

                            <programlisting language="java">URLPermission perm_1 = new
                                URLPermission("url_1","http://someurl.domain/path?param1=a&amp;*");

                                URLPermission perm_2 = new URLPermission("url_2","http://someurl.domain/path?param1=a&amp;param2=b&amp;param3=c");

                                perm1.implies(perm2) return true
                            </programlisting>

                            <para>Stars can also be used in parameter names or values
                                definition just as in path
                            </para>

                            <programlisting language="java">URLPermission perm_1 = new
                                URLPermission("url_1","http://someurl.domain/path?param1=a&amp;param2=*&amp;pa*3=c");

                                URLPermission perm_2 = new URLPermission("url_2","http://someurl.domain/path?param1=a&amp;param2=b&amp;param3=c");

                                perm1.implies(perm2) return true
                            </programlisting>
                        </listitem>

                        <listitem>
                            <para>and what's about star symbol in our URL?</para>

                            <para>URL can contains the star , without any signification. So,
                                to include it in your URL, you have to double your star.
                            </para>

                            <programlisting language="java">URLPermission perm_1 = new
                                URLPermission("url_1","http://someurl.domain/path1*");
                            </programlisting>

                            <para>this URL will be used by jGuard like a regexp
                                character.
                            </para>

                            <programlisting language="java">URLPermission perm_1 = new
                                URLPermission("url_1","http://someurl.domain/path1**");
                            </programlisting>

                            <para>but this URL won't be used by jGuard like a regexp
                                character, and will be evaluated like a URL with only one star
                                symbol.
                            </para>
                        </listitem>
                    </itemizedlist>
                </sect3>

                <sect3>
                    <title>what's about URLPermission and my web application?</title>

                    <para>the star operator will not have some impact on the web
                        framework you use (i.e Struts or another one).
                        <classname>AccessFilter</classname>
                        handle all the HTTP user
                        requests, and handle any trick on star characters. So, you can use
                        any star character in your URLs without problems outside jGuard
                        configuration.
                    </para>
                </sect3>
            </sect2>

            <sect2>
                <title>Contextual permissions</title>

                <para>since<productnumber>1.0 release</productnumber>, jGuard supports
                    '<literal>contextual</literal>' permissions. It implies that you can
                    refers in any permissions (subclass of
                    <classname>java.security.Permission</classname>), to some context
                    variables like user credentials and roles. Like
                    <acronym>RBAC</acronym>
                    design impose that user and permissions
                    mustn't bound statically,these variables are resolved dynamically.
                    When the user will try to enforce a permission, jGuard will grab all
                    permissions of the user,including contextual permissions, and will
                    resolve variables of these permissions. Thus, jGuard will compare the
                    permission enforced with the resolved ones.
                </para>

                <sect3>
                    <title>syntax</title>

                    <para>jGuard uses the
                        <ulink
                                url="http://jakarta.apache.org/commons/jexl/">Jakarta commons JEXL
                            project
                        </ulink>
                        expression library to provide expressiveness on
                        contextual variables. This project has got a syntax page:
                        <ulink
                                url="http://jakarta.apache.org/commons/jexl/reference/syntax.html">
                            http://jakarta.apache.org/commons/jexl/reference/syntax.html
                        </ulink>
                    </para>
                </sect3>

                <sect3>
                    <title>examples</title>

                    <itemizedlist>
                        <listitem>
                            <para>permission refers to credentials</para>

                            <para>public credentials are referenced with<programlisting>
                                ${subject.publicCredentials}</programlisting>private
                                credentials are referenced with
                                <programlisting>${subject.privateCredentials}</programlisting>
                            </para>

                            <programlisting language="java">Permission p1 = new
                                URLPermission("index","http://www.website.com/index.html?name=${subject.publicCredentials.name}");

                                Permission p2 = new
                                URLPermission("index","http://www.website.com/index.html?name=${subject.privateCredentials.country}");

                                Permission p3 = new
                                FilePermission("file://home/user/${subject.publicCredentials.company}", "read");
                            </programlisting>
                        </listitem>

                        <listitem>
                            <para>permission refers to roles</para>

                            <para>private credentials are referenced with
                                <programlisting>${subject.roles}</programlisting>
                            </para>
                        </listitem>

                        <listitem>
                            <para>permission refers to organization</para>

                            <para>organization credentials are referenced with
                                <programlisting>${subject.organization.credentials}</programlisting>
                            </para>

                            <para>organization principals are referenced with
                                <programlisting>${subject.organization.principals}</programlisting>
                            </para>
                        </listitem>
                    </itemizedlist>
                </sect3>
            </sect2>

            <sect2>
                <title>how to create its own permission</title>

                <sect3>
                    <title>what is a permission?</title>

                    <para>a Permission is a class which represents an access to one or
                        multiple resources. This class is used by access Control mechanism
                        to protect your resources. Access control can be done in multiple
                        points. But you should control access homogeneously.
                    </para>
                </sect3>

                <sect3>
                    <title>do i need to create a custom permission?</title>

                    <para>jGuard can handle in its authorization system, any Permission
                        subclasses. It provides also a convenient Permission to represents
                        access to URL:
                        <classname>URLPermission</classname>
                        .
                    </para>

                    <para>so, if your resources can only be accessed by HTTP(through a
                        navigator for example), you should use the jGuard
                        <classname>URLPermission</classname>. Otherwise,you have to create
                        your own Permission implementation, or use some permissions
                        implementations provided by the Java j2se platform like :
                    </para>

                    <itemizedlist>
                        <listitem>
                            <para>Permissions available on Java 1.4.2 and higher</para>

                            <itemizedlist>
                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/security/AllPermission.html">
                                            AllPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/javax/sound/sampled/AudioPermission.html">
                                            AudioPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/javax/security/auth/AuthPermission.html">
                                            AuthPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/AWTPermission.html">
                                            AWTPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/security/BasicPermission.html">
                                            BasicPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/javax/security/auth/kerberos/DelegationPermission.html">
                                            DelegationPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/LoggingPermission.html">
                                            LoggingPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/io/FilePermission.html">
                                            FilePermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/net/NetPermission.html">
                                            NetPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/javax/security/auth/PrivateCredentialPermission.html">
                                            PrivateCredentialPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/util/PropertyPermission.html">
                                            PropertyPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/reflect/ReflectPermission.html">
                                            ReflectPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/RuntimePermission.html">
                                            RuntimePermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/sql/SQLPermission.html">
                                            SQLPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/javax/net/ssl/SSLPermission.html">
                                            SSLPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/security/SecurityPermission.html">
                                            SecurityPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/io/SerializablePermission.html">
                                            SerializablePermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/javax/security/auth/kerberos/ServicePermission.html">
                                            ServicePermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/net/SocketPermission.html">
                                            SocketPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/security/UnresolvedPermission.html">
                                            UnresolvedPermission
                                        </ulink>
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>

                        <listitem>
                            <para>Permissions available on Java 1.5.0 and higher</para>

                            <itemizedlist>
                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/ManagementPermission.html">
                                            ManagementPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.5.0/docs/api/index.html">MBeanPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/MBeanServerPermission.html">
                                            MBeanServerPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/MBeanTrustPermission.html">
                                            MBeanTrustPermission
                                        </ulink>
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/remote/SubjectDelegationPermission.html">
                                            SubjectDelegationPermission
                                        </ulink>
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>

                        <listitem>
                            <para>Permissions available on Java 1.6.0 and higher</para>

                            <itemizedlist>
                                <listitem>
                                    <para>
                                        <ulink
                                                url="http://java.sun.com/javase/6/docs/api/javax/xml/ws/WebServicePermission.html">
                                            WebServicePermission
                                        </ulink>
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </sect3>

                <sect3>
                    <title>Resources and Permissions relationships</title>

                    <para>In most cases,Access/use of resources, are "translated" in
                        Java by instantiation of objects, or execution of methods :
                        indirectly,it's these constructors/methods that you want to protect.
                        In Java (i.e in the Java platform or in custom code),Resource
                        protect "themselves" against misuse: the corresponding method
                        involved, create the related permission which will decide if access
                        should be granted. If your resource is designed by the Class
                        Resource, and like no provided permissions are suitable to protect
                        your resource, you will have too create a
                        <classname>ResourcePermission</classname>. Here is an example of the
                        Resource class:
                    </para>

                    <programlisting language="java">public class Ressource{

                        private String ressourceName = null;

                        public Ressource(String name)throws SecurityException{
                        this.ressourceName = name;
                        AccessController.checkPermission(new RessourcePermission(this.ressourceName,"create"));
                        }

                        public void inactivateRessource(Collection coll)throws SecurityException{
                        AccessController.checkPermission(new RessourcePermission(this.ressourceName,"inactivate"));
                        .....
                        //inactivation code executed only if the user which calls this code has got the rights
                        permissions
                        .....
                        .....
                        }

                        public void updateRessource(Collection coll)throws SecurityException{
                        AccessController.checkPermission(new RessourcePermission(this.ressourceName,"update"));
                        .....
                        //update code executed only if the user which calls this code has got the rights permissions
                        .....
                        .....
                        }

                        }
                    </programlisting>

                    <para>the 'magic' code</para>

                    <programlisting language="java">AccessController.checkPermission(new RessourcePermission(...));
                    </programlisting>

                    <para>will invoke a
                        <acronym>JAAS</acronym>
                        mechanism to
                        automatically check if the user has got the right permission;
                        otherwise, it will throw a SecurityException. Access Control is
                        delegated to the ResourcePermission. A protected resource can be any
                        kind of resource, like a physical resource (a file), but although a
                        LOGICAL resource like a Debt, a pizzaService(??).... Note that
                        <methodname>AccessController.checkPermission(....)</methodname>will
                        always check access, also when the securityManager is not set. When
                        the default securityManager is set, it delegates all the permission
                        checks to AccessController. But if a custom SecurityManager is set,
                        if you call the
                        <methodname>checkPermission</methodname>
                        from the
                        SecurityManager, you are not sure that the AccessController class
                        will be called(it's the choice of the SecurityManager custom
                        implementation). So,for backward compatibility, and to enable access
                        control only when the securityManager is set, you can replace
                    </para>

                    <programlisting language="java">AccessController.checkPermission</programlisting>

                    <para>by:</para>

                    <programlisting language="java">SecurityManager sManager= Security.getSecurityManager();
                        if(sManager != null)
                        sManager.checkPermission(new Ressourcepermission(...));
                        }
                    </programlisting>

                    <note>
                        <para>if you don't need an overall global Security, jGuard
                            provides a
                            <literal>local</literal>
                            mode. So, the security is not
                            at the JVM level (the
                            <literal>JVM</literal>
                            mode), but only at
                            the classLoader level. i.e, only code loaded by the classloader is
                            handled by another AccessController implementation from jGuard
                            (formerly<classname>localAccessController</classname>). This
                            <literal>local</literal>
                            mode securize your webapp if your
                            application server is configured in the official jee way (
                            <literal>parent last</literal>
                            classloader loading strategy). So,
                            to be sure to handle a security check from the right
                            accessController in use, you have to use the
                            <classname>AccessCOntrollerUtils</classname>
                            class.
                        </para>

                        <programlisting language="java">AccessControllerUtils.checkPermission(Subject
                            yourSubject,Permission yourPermission);
                        </programlisting>
                    </note>
                </sect3>

                <sect3>
                    <title>implement your own permission: some rules to follow</title>

                    <para>if you need to protect a resource( not mapped by any
                        Permission implementations described on top of this page), you have
                        to create your own permission. To do it, you have to extends
                        Permission. Permissions are often created by the resources to
                        protect. So, this resource will give to the Permission the needed
                        informations to 'qualify' the permission, to know what's the caller
                        thread want to do. Permission qualifies actions needed on the
                        Resource, and decides if the needed permission is compatible with
                        the Permissions owned by the calling thread.
                    </para>

                    <caution>
                        <para>one good security practice is to declare
                            <literal>final</literal>
                            your new Permission class, to avoid
                            anyone to subclass it and change its mechanism.
                        </para>
                    </caution>

                    <sect4>
                        <title>Permission abstract class</title>

                        <para>here are the methods you need to implements.</para>

                        <itemizedlist>
                            <listitem>
                                <para>
                                    <methodname>Permission(String name)</methodname>
                                </para>

                                <para>
                                    <ulink
                                            url="http://java.sun.com/j2se/1.4.2/docs/api/java/security/Permission.html">
                                        Permission
                                    </ulink>
                                    abstract class to extend,implies a
                                    Constructor with a name to identify the Permission.
                                </para>
                            </listitem>

                            <listitem>
                                <para>
                                    <methodname>boolean equals(Object obj)
                                    </methodname>
                                </para>

                                <para>this method must be implemented in your subclass. Its
                                    goal is to test equality of Permissions of the same type, and
                                    NOT implies another permission; a dedicated implies method do
                                    that.
                                </para>
                            </listitem>

                            <listitem>
                                <para>
                                    <methodname>String getActions()</methodname>
                                </para>

                                <para>this method must be implemented in your subclass. If you
                                    use an additional 'actions' parameter, you will return it;
                                    otherwise, return an empty string("").In our example, the
                                    class Resource give to the RessourcePermission a name and one
                                    action String which can be "create","inactivate" or
                                    "update".
                                </para>
                            </listitem>

                            <listitem>
                                <para>
                                    <methodname>int hashCode()</methodname>
                                </para>

                                <para>this method must be implemented in your subclass.</para>
                            </listitem>

                            <listitem>
                                <para>
                                    <methodname>boolean implies(Permission permission)
                                    </methodname>
                                </para>

                                <para>this method is used when JAAS checks that the calling
                                    thread (in most cases the user),has got one permission or more
                                    which implies this one. So, all your custom code to know if
                                    the permission of the caller implies this one should be placed
                                    here. This method is the main difference between multiple
                                    Permission implementations.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </sect4>

                    <sect4>
                        <title>BasicPermission</title>

                        <para>it exists a subclass of Permission called<ulink
                                url="???">BasicPermission</ulink>, which provides a convenient
                            mechanism to guards some simple Resources. It provides also one
                            more constructor with two String(name and actions).
                        </para>
                    </sect4>
                </sect3>
            </sect2>

            <sect2>
                <title>Negative permissions</title>

                <sect3>
                    <title>positive permissions mechanism</title>

                    <para>When a user or a library tries to access to a resource, Java
                        enforces a check against a permission specified by the resource :
                        the resource calls the
                        <methodname>checkPermission</methodname>
                        method of the
                        <classname>AccessController</classname>
                        class with the
                        chosen permission.
                    </para>

                    <programlisting language="java">Permission myPermission = new
                        MyPermission(permissionName,permissionActions);
                        AccessController.checkPermission(myPermission);
                    </programlisting>

                    <para>Note that the resource can call the checkPermission method of
                        the SecurityManager , which will delegate check to AccessController
                        if it is set. So, the only difference is that
                        AccessController.checkPermission will always do the check, although
                        if the SecurityManager flag is not set. The SecurityManager will do
                        the check only if it is set, and will delegate it to
                        AccessController.
                    </para>

                    <programlisting language="java">Permission myPermission = new
                        MyPermission(permissionName,permissionActions);
                        SecurityManager securityManager = System.getSecurityManager();
                        if (securityManager != null) {
                        securityManager.checkPermission(myPermission);
                        }
                    </programlisting>

                    <para>this call verifies that the user / library contains one or
                        more permissions implied by this permission. If that's true, access
                        is granted. One permission is necessary to grant access, although if
                        all others are not implied by the permission which guard the
                        resource.
                    </para>

                    <note>
                        <para>by default, jGuard use positive permissions</para>
                    </note>
                </sect3>

                <sect3>
                    <title>negative permissions mechanism</title>

                    <para>negative permissions is set in the web application, by
                        including in you web.xml file this parameter:
                    </para>

                    <programlisting>&lt;context-param&gt;
                        &lt;param-name&gt;negativePermissions&lt;/param-name&gt;
                        &lt;param-value&gt;true&lt;/param-value&gt;
                        &lt;/context-param&gt;</programlisting>

                    <para>this mechanism grant access if no permission implies the
                        checked permission . If one or more permission imply the requested
                        permission, access will NOT be granted. Access will be blocked. So,
                        if one permission(or more) of the user (or library) implies the
                        checked permission, it acts as a<ulink
                                url="http://en.wikipedia.org/wiki/Veto">veto</ulink>.
                    </para>
                </sect3>

                <sect3>
                    <title>mixing positive and negative permissions</title>

                    <para>this mechanism is not yet available. This mechanism can be
                        useful in some cases, but maybe implies a bigger complexity in
                        managing your application. This mechanism will be added if some
                        users ask it.
                    </para>
                </sect3>
            </sect2>
        </sect1>
    </chapter>

    <chapter id="chap.accesscontrol">
        <title>Which Access Control model is the best solution to manage
            security?
        </title>

        <para>jGuard uses an
            <acronym>ABAC</acronym>
            access control model.
        </para>

        <para>Here is a list of the different Access Control Models:</para>

        <sect1>
            <title>Discretionary Access Control (<acronym>DAC</acronym>)
            </title>

            <para>the main disadvantages of this model are:</para>

            <itemizedlist>
                <listitem>
                    <para>loss of flexibility</para>
                </listitem>

                <listitem>
                    <para>security is discretionary, not central</para>
                </listitem>
            </itemizedlist>

            <para>according to the Computer Security resource center of the
                <acronym>NIST</acronym>(US),~~ DAC is used to control access by
                restricting a subject's access to an object. It is generally used to
                limit a user's access to a file.
            </para>

            <para>n this type of access control it is the owner of the file who
                controls other users' accesses to the file.~~ This type of Access
                Control is generally used in UNIX systems. This mechanism can be used
                with the help of Access Control Lists (ACL), which allows assignment of
                permissions to users which are part of the group of the owner, or other
                users. This access control is not very flexible for medium or large
                organization which have many users. This mechanism has the following
                issues: If the user quits the organization, many security operations are
                needed, to assign the same authorization to the new user; and this
                system assumes that the user is not malicious, because the user owns the
                resource, and can do whatever he wants with it, including granting
                access to to everyone. It can be a big security hole. This mechanism is
                not suitable for an advanced security system. To reflect these
                conclusions,and to prove that UNIX systems are not all bound to this old
                mechanism,you can point to:
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        <ulink
                                url="http://www.samag.com/documents/s=7667/sam0213c/0213c.htm">the
                            Solaris
                            <acronym>RBAC</acronym>
                            system
                        </ulink>
                        introduced since
                        Solaris 8 (Solaris is a UNIX system shipped by
                        <trademark>SUN</trademark>)
                    </para>
                </listitem>

                <listitem>
                    <para>the
                        <ulink url="http://www.grsecurity.net/">gr-security
                        </ulink>
                        security system for Linux which also add RBAC features to
                        the Linux kernel
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>Mandatory Access Control (<acronym>MAC</acronym>)
            </title>

            <para>In Mandatory Access Control models,Subjects(users) receive a
                clearance label and objects receive a classification label, also
                referred to as security levels. No users can do operations on objects
                that are not permitted by the administrator which has configured the
                system. This system remove the discretionary aspect of the DAC model, to
                centrally control operations on objects made by users. But this system
                has got the disadvantage to not be flexible: access rights are defined
                for each users;this mechanism implies many administrative operations,
                when by example a user replace another one to a function in the
                organization.
            </para>
        </sect1>

        <sect1>
            <title>Role Based Access Control (<acronym>RBAC</acronym>)
            </title>

            <para>many informations comes from this
                <ulink
                        url="http://csrc.nist.gov/rbac/rbacSTD-ACM.pdf">RBAC draft
                </ulink>
                provided by the NIST.
            </para>

            <para>RBAC features are divided into 4 components:</para>

            <itemizedlist>
                <listitem>
                    <para>Core RBAC</para>

                    <para>this part is sub-divided into 6 parts:</para>

                    <itemizedlist>
                        <listitem>
                            <para>relations between users, roles, permissions</para>

                            <para>the main principle of RBAC, is that users are assigned to
                                roles(principals),permissions are assigned to roles, and
                                acquires permissions by being members of roles. RBAC has go a
                                great flexibility: user-role and permission-role relations are
                                many-to-many, i.e a user can have many roles, and a role can be
                                assigned to many users; and a permission an be assigned to many
                                roles, and a role can have many permissions.
                            </para>
                        </listitem>

                        <listitem>
                            <para>administrative functions</para>

                            <para>RBAC implies for administration tasks, to provide the way
                                to know which users has got a specific role, and which roles has
                                got a user. The same administrative function can be done between
                                roles and permissions.
                            </para>
                        </listitem>

                        <listitem>
                            <para>user sessions</para>

                            <para>core RBAC includes the concept of user sessions, which
                                permit activation and deactivation of roles owned by
                                users.
                            </para>
                        </listitem>

                        <listitem>
                            <para>user and multiple roles</para>

                            <para>a user (which owns multiples roles) can be able to
                                simultaneously exercise permissions of multiple roles. Some
                                security products handle multiples roles or groups in their
                                mechanism, but cannot exercise permissions of multiples roles at
                                the same time!
                            </para>
                        </listitem>

                        <listitem>
                            <para>centrally administering security</para>
                        </listitem>

                        <listitem>
                            <para>principle of least privilege</para>
                        </listitem>
                    </itemizedlist>
                </listitem>

                <listitem>
                    <para>hierarchical RBAC</para>

                    <para>RBAC recognises two types of hierarchies:</para>

                    <itemizedlist>
                        <listitem>
                            <para>general hierarchy with support of multiple
                                inheritance
                            </para>
                        </listitem>

                        <listitem>
                            <para>limited hierarchy without support of multiple
                                inheritance
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>

                <listitem>
                    <para>Static separation of duty (<acronym>SSOD</acronym>)
                    </para>

                    <para>This principle permits to avoid conflict of interest. It
                        consists of constraints added to the user-role assignment, which
                        prevents some roles to be added to users which have got some others
                        roles.The standard only specifies constraints on roles, but it can
                        be useful to put constraint on permissions, or operations on
                        protected resources.
                    </para>
                </listitem>

                <listitem>
                    <para>Dynamic separation of duty (<acronym>DSOD</acronym>)
                    </para>

                    <para>Dynamic separation of Duty is an extension because it implies
                        a separation of duty across the user's session.
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>Attribute Based Access Control (<acronym>ABAC</acronym>)
            </title>

            <para>ABAC permits to resolve access control decisions on role, and
                permissions like in the
                <acronym>RBAC</acronym>
                model, but also on user
                attributes. Since jGuard 1.0.0, we permit to include in permissions (see
                contextual permissions) and roles(see dynamic role definition) some
                variables referencing user attributes. So, ABAC model stands on RBAC
                model, and enhance its flexibility.
            </para>
        </sect1>
    </chapter>

    <chapter>
        <title>Glossary</title>

        <glosslist>
            <glossentry>
                <glossterm>permission</glossterm>

                <glossdef>
                    <para>permission is the right to execute an action on a resource,
                        like access to a page, update an account...
                    </para>
                </glossdef>
            </glossentry>

            <glossentry>
                <glossterm>principal</glossterm>

                <glossdef>
                    <para>role</para>
                </glossdef>
            </glossentry>

            <glossentry>
                <glossterm>subject</glossterm>

                <glossdef>
                    <para>user</para>
                </glossdef>
            </glossentry>

            <glossentry>
                <glossterm>organization</glossterm>

                <glossdef>
                    <para>entity which grnats the user to operate on the
                        application
                    </para>
                </glossdef>
            </glossentry>

            <glossentry>
                <glossterm>domain</glossterm>

                <glossdef>
                    <para>permission's set used to regroup some features of your
                        application (CRUD operations for Invoice and so on...)
                    </para>
                </glossdef>
            </glossentry>

            <glossentry>
                <glossterm>RBAC</glossterm>

                <glossdef>
                    <para>Role Based Access Control</para>
                </glossdef>
            </glossentry>

            <glossentry>
                <glossterm>ABAC</glossterm>

                <glossdef>
                    <para>Attribute Based Access Control</para>
                </glossdef>
            </glossentry>

            <glossentry>
                <glossterm>DAC</glossterm>

                <glossdef>
                    <para>Discretionary Access Control</para>
                </glossdef>
            </glossentry>

            <glossentry>
                <glossterm>MAC</glossterm>

                <glossdef>
                    <para>Mandatory Access Control</para>
                </glossdef>
            </glossentry>

            <glossentry>
                <glossterm>credential</glossterm>

                <glossdef>
                    <para>security attribute owned by the user: personal information
                        like name, password, social security number
                    </para>
                </glossdef>
            </glossentry>
        </glosslist>
    </chapter>

    <chapter>
        <title>jGuard audit</title>

        <section>
            <title></title>

            <para></para>
        </section>
    </chapter>

    <chapter>
        <title>jGuard and standalone applications</title>

        <para>
            <productname>jguard-swing-example</productname>
            has to be run with
            the
            <classname>SecurityManager</classname>
            activated, unlike
            <productname>jguard-struts-example</productname>
            that can run with or
            without it. jguard-swing-example is a very basic demonstration of what
            <productname>jGuard</productname>
            can do to secure standalone
            applications. It simply tries to read a file with the rights granted to
            the connected user. To use jGuard, we must configure the authentication
            part and the authorization part. The authentication part do not use full
            jGuard implementation. We keep the
            <trademark>Sun</trademark>
            Configuration implementation to define the loginModules. We will use a
            jGuard loginModule to set the principals through a XML file. On the other
            hand, the authorization part is full jGuard.
        </para>

        <sect1>
            <title>Java SecurityManager</title>

            <para>to activate the securityManager, you have either:</para>

            <itemizedlist>
                <listitem>
                    <para>to launch your standalone application with this
                        parameter:
                    </para>

                    <programlisting>-Djava.security.manager</programlisting>
                </listitem>

                <listitem>
                    <para>or set a java.lang.SecurityManager programmatically:</para>

                    <programlisting>//we test if there is a SecurityManager in place
                        SecurityManager sm = System.getSecurityManager();
                        if (sm == null){
                        System.setSecurityManager(new SecurityManager());
                        }
                    </programlisting>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>configure Java security</title>

            <sect2>
                <title>
                    <filename>java.security</filename>
                </title>

                <para>
                    <filename>java.security</filename>
                    file is the master security
                    configuration file; all security settings (authentication and
                    authorization) stands on it. It is located in
                    <literal>${java.home}/lib/security/</literal>
                    . To install jGuard, you
                    have to:
                </para>

                <itemizedlist>
                    <listitem>
                        <para>verify that
                            <literal>login.configuration.provider</literal>
                            (the
                            <classname>javax.security.auth.login.Configuration</classname>
                            implementation in place) is set to
                            <classname>com.sun.security.auth.login.ConfigFile</classname>, i.e
                            the default implementation shipped with the JVM.
                        </para>
                    </listitem>

                    <listitem>
                        <para>reference the related<trademark>SUN</trademark>'s
                            authentication configuration file :
                        </para>

                        <para>modify the property
                            <literal>login.config.url.1</literal>
                            and set it to
                            <literal>login.config.url.1=file:///jguard-swing-example/conf/java.login.config</literal>
                        </para>
                    </listitem>

                    <listitem>
                        <para>reference jGuard Authorization mechanism:</para>

                        <para>modify the property
                            <literal>policy.provider</literal>
                            and
                            set it to
                            <literal>policy.provider=net.sf.jguard.ext.authorization.policy.classic.SingleAppPolicy
                            </literal>
                        </para>
                    </listitem>
                </itemizedlist>
            </sect2>

            <sect2>
                <title>configure the<trademark>SUN</trademark>'s authentication
                    configuration file
                </title>

                <itemizedlist>
                    <listitem>
                        <para>create a java.login.config file containing the following
                            entries :
                        </para>

                        <programlisting>your_application_name{
                            net.sf.jguard.authentication.loginmodules.XmlLoginModule REQUIRED
                            fileLocation="path_to/jGuardUsersPrincipals.xml" debug=true ;
                            };
                        </programlisting>

                        <caution>
                            <para>Pay attention to the position of the semicolons. Go to
                                <ulink
                                        url="http://java.sun.com/j2se/1.4.2/docs/api/javax/security/auth/login/Configuration.html">
                                    <classname>javax.security.auth.login.Configuration</classname>
                                    Javadoc
                                </ulink>
                                for more information about configuration file
                                format.
                            </para>
                        </caution>
                    </listitem>

                    <listitem>
                        <para>create the file
                            <filename>JGuardUsersPrincipals.xml</filename>
                            you've defined in
                            fileLocation options in
                            <filename>java.login.config</filename>
                            <example>
                                <title>JGuardUsersPrincipals.xml example</title>

                                <programlisting>&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="no"?&gt;
                                    &lt;!DOCTYPE usersPrincipals SYSTEM "jGuardUsersPrincipals_1.00.dtd"&gt;
                                    &lt;usersPrincipals&gt;
                                    &lt;principals&gt;
                                    &lt;principal&gt;
                                    &lt;name&gt;admin&lt;/name&gt;
                                    &lt;class&gt;net.sf.jguard.core.authorization.permissions.RolePrincipal&lt;/class&gt;
                                    &lt;applicationName&gt;jGuardSwingExample&lt;/applicationName&gt;
                                    &lt;/principal&gt;
                                    &lt;principal&gt;
                                    &lt;name&gt;guest&lt;/name&gt;
                                    &lt;class&gt;net.sf.jguard.core.authorization.permissions.RolePrincipal&lt;/class&gt;
                                    &lt;applicationName&gt;jGuardSwingExample&lt;/applicationName&gt;
                                    &lt;/principal&gt;
                                    &lt;/principals&gt;
                                    &lt;users&gt;
                                    &lt;userTemplate&gt;
                                    &lt;name&gt;default&lt;/name&gt;
                                    &lt;privateRequiredCredentials&gt;
                                    &lt;credTemplateId&gt;login&lt;/credTemplateId&gt;
                                    &lt;credTemplateId&gt;password&lt;/credTemplateId&gt;
                                    &lt;/privateRequiredCredentials&gt;
                                    &lt;publicRequiredCredentials&gt;
                                    &lt;credTemplateId&gt;firstname&lt;/credTemplateId&gt;
                                    &lt;credTemplateId&gt;lastname&lt;/credTemplateId&gt;
                                    &lt;credTemplateId&gt;location&lt;/credTemplateId&gt;
                                    &lt;/publicRequiredCredentials&gt;
                                    &lt;privateOptionalCredentials&gt;
                                    &lt;credTemplateId&gt;country&lt;/credTemplateId&gt;
                                    &lt;credTemplateId&gt;religion&lt;/credTemplateId&gt;
                                    &lt;/privateOptionalCredentials&gt;
                                    &lt;publicOptionalCredentials&gt;
                                    &lt;credTemplateId&gt;hobbies&lt;/credTemplateId&gt;
                                    &lt;/publicOptionalCredentials&gt;
                                    &lt;genericPrincipals&gt;
                                    &lt;/genericPrincipals&gt;
                                    &lt;specificPrincipalFactories&gt;
                                    &lt;/specificPrincipalFactories&gt;
                                    &lt;/userTemplate&gt;
                                    &lt;user&gt;
                                    &lt;privateCredentials&gt;
                                    &lt;credential&gt;
                                    &lt;id&gt;login&lt;/id&gt;
                                    &lt;value&gt;admin&lt;/value&gt;
                                    &lt;/credential&gt;
                                    &lt;credential&gt;
                                    &lt;id&gt;password&lt;/id&gt;
                                    &lt;value&gt;admin&lt;/value&gt;
                                    &lt;/credential&gt;
                                    &lt;/privateCredentials&gt;

                                    &lt;publicCredentials&gt;
                                    &lt;credential&gt;
                                    &lt;id&gt;firstname&lt;/id&gt;
                                    &lt;value&gt;Rick&lt;/value&gt;
                                    &lt;/credential&gt;
                                    &lt;credential&gt;
                                    &lt;id&gt;lastname&lt;/id&gt;
                                    &lt;value&gt;Dangerous&lt;/value&gt;
                                    &lt;/credential&gt;
                                    &lt;credential&gt;
                                    &lt;id&gt;location&lt;/id&gt;
                                    &lt;value&gt;Paris&lt;/value&gt;
                                    &lt;/credential&gt;
                                    &lt;/publicCredentials&gt;

                                    &lt;principalsRef&gt;
                                    &lt;principalRef name="admin" applicationName="jGuardSwingExample" /&gt;
                                    &lt;/principalsRef&gt;
                                    &lt;/user&gt;
                                    &lt;user&gt;
                                    &lt;privateCredentials&gt;
                                    &lt;credential&gt;
                                    &lt;id&gt;login&lt;/id&gt;
                                    &lt;value&gt;guest&lt;/value&gt;
                                    &lt;/credential&gt;
                                    &lt;credential&gt;
                                    &lt;id&gt;password&lt;/id&gt;
                                    &lt;value&gt;guest&lt;/value&gt;
                                    &lt;/credential&gt;
                                    &lt;/privateCredentials&gt;
                                    &lt;publicCredentials&gt;
                                    &lt;credential&gt;
                                    &lt;id&gt;firstname&lt;/id&gt;
                                    &lt;value&gt;guest&lt;/value&gt;
                                    &lt;/credential&gt;
                                    &lt;credential&gt;
                                    &lt;id&gt;lastname&lt;/id&gt;
                                    &lt;value&gt;guest&lt;/value&gt;
                                    &lt;/credential&gt;
                                    &lt;credential&gt;
                                    &lt;id&gt;location&lt;/id&gt;
                                    &lt;value&gt;somewhere in the world&lt;/value&gt;
                                    &lt;/credential&gt;
                                    &lt;/publicCredentials&gt;
                                    &lt;principalsRef&gt;
                                    &lt;principalRef name="guest" applicationName="jGuardSwingExample" /&gt;
                                    &lt;/principalsRef&gt;
                                    &lt;/user&gt;
                                    &lt;/users&gt;
                                    &lt;/usersPrincipals&gt;</programlisting>
                            </example>
                        </para>
                    </listitem>
                </itemizedlist>
            </sect2>

            <sect2>
                <title>configure Java authorization</title>

                <para>this configuration file is specific to the default Policy
                    mechanism provided by<trademark>SUN</trademark>, and followed by all
                    <acronym>JVM</acronym>
                    vendors. java.policy is located in
                    <literal>${java.home}/lib/security/</literal>
                    . If you use the default
                    Policy, you have to include for the jguard-swing-example the following
                    permissions to the
                    <filename>java.policy</filename>
                    file:
                </para>

                <programlisting>grant codeBase "file:/&lt;eclipse-workspace&gt;/jguard-swing-example/eclipse-bin/-" {

                    permission java.util.PropertyPermission "log4j.defaultInitOverride", "read";
                    permission java.util.PropertyPermission "log4j.configuration", "read";
                    permission java.util.PropertyPermission "log4j.configuratorClass", "read";
                    permission java.util.PropertyPermission "log4j.ignoreTCL", "read";
                    permission java.util.PropertyPermission "log4j.debug", "read";
                    permission java.util.PropertyPermission "log4j.configDebug", "read";
                    permission java.util.PropertyPermission "javax.xml.parsers.DocumentBuilderFactory", "read";
                    permission java.util.PropertyPermission "user.dir", "read";

                    permission java.awt.AWTPermission "showWindowWithoutWarningBanner";
                    permission java.awt.AWTPermission "accessEventQueue";
                    permission java.awt.AWTPermission "accessClipboard";

                    permission java.io.FilePermission "&lt;M2_REPO&gt;/log4j/log4j/1.2.12/log4j-1.2.12.jar", "read";

                    permission javax.security.auth.AuthPermission "createLoginContext.jGuardSwingExample";
                    permission javax.security.auth.PrivateCredentialPermission
                    "net.sf.jguard.core.authentication.credentials.JGuardCredential
                    net.sf.jguard.core.authorization.permissions.RolePrincipal "*"","read";
                    permission javax.security.auth.AuthPermission "modifyPrincipals";
                    permission javax.security.auth.AuthPermission "modifyPrivateCredentials";
                    permission javax.security.auth.AuthPermission "modifyPublicCredentials";

                    permission java.lang.RuntimePermission "modifyThreadGroup";
                    };

                    grant codeBase "file:/&lt;eclipse-workspace&gt;/jguard-ext/eclipse-bin/-" {

                    permission java.util.PropertyPermission "net.sf.jguard.application.name", "read";
                    permission java.util.PropertyPermission "com.sun.management.jmxremote.login.config", "read";
                    permission java.util.PropertyPermission "org.dom4j.factory", "read";
                    permission java.util.PropertyPermission "org.dom4j.DocumentFactory.singleton.strategy", "read";
                    permission java.util.PropertyPermission "org.saxpath.driver", "read";
                    permission java.util.PropertyPermission "org.dom4j.QName.singleton.strategy", "read";
                    permission java.util.PropertyPermission "org.dom4j.QName.singleton.strategy", "read";

                    permission java.io.FilePermission "\\confjGuardUsersPrincipals.xml", "read";
                    permission java.io.FilePermission "&lt;eclipse-workspace&gt;/jguard-swing-example/conf/jGuardUsersPrincipals.xml",
                    "read";
                    permission java.io.FilePermission "&lt;eclipse-workspace&gt;/jguard-swing-example/conf/jGuardUsersPrincipals_1.00.dtd",
                    "read";

                    permission javax.security.auth.PrivateCredentialPermission
                    "net.sf.jguard.core.authentication.credentials.JGuardCredential
                    net.sf.jguard.core.authorization.permissions.RolePrincipal "*"","read";
                    permission javax.security.auth.AuthPermission "modifyPrincipals";
                    permission javax.security.auth.AuthPermission "modifyPrivateCredentials";
                    permission javax.security.auth.AuthPermission "modifyPublicCredentials";
                    };

                    grant codeBase "
                    file:/&lt;eclipse-workspace&gt;/jguard-core/eclipse-bin/-" {

                    permission javax.security.auth.PrivateCredentialPermission
                    "net.sf.jguard.core.authentication.credentials.JGuardCredential
                    net.sf.jguard.core.authorization.permissions.RolePrincipal "*"","read";
                    permission javax.security.auth.AuthPermission "modifyPrincipals";
                    permission javax.security.auth.AuthPermission "modifyPrivateCredentials";
                    permission javax.security.auth.AuthPermission "modifyPublicCredentials";
                    };

                    grant codebase "file:/&lt;M2_REPO&gt;/-" {

                    permission java.util.PropertyPermission "org.apache.xerces.xni.parser.XMLParserConfiguration",
                    "read";
                    permission java.util.PropertyPermission "java.home", "read";
                    permission java.util.PropertyPermission "org.dom4j.QName.singleton.strategy", "read";

                    permission java.io.FilePermission "&lt;JDK_HOME&gt;/jre/lib/xerces.properties", "read";
                    permission java.io.FilePermission "&lt;eclipse-workspace&gt;/jguard-swing-example/eclipse-bin/log4j.xml",
                    "read";
                    permission java.io.FilePermission "&lt;JDK_HOME&gt;/jre/lib/xerces.properties", "read";
                    permission java.io.FilePermission "&lt;M2_REPO&gt;/log4j/log4j/1.2.12/log4j-1.2.12.jar", "read";
                    permission java.io.FilePermission "\\confjGuardUsersPrincipals.xml", "read";
                    };
                </programlisting>

                <para>replace &lt;eclipse-workspace&gt;,&lt;M2_REPO&gt; ,
                    &lt;JDK_HOME&gt; by your own values.
                </para>
            </sect2>

            <sect2>
                <title>Configure
                    <filename>java.login.config</filename>
                </title>

                <itemizedlist>
                    <listitem>
                        <para>open<filename>java.login.config</filename>located in
                            <literal>/jguard-swing-example/conf/</literal>
                        </para>
                    </listitem>

                    <listitem>
                        <para>modify
                            <literal>authenticationXmlFileLocation</literal>
                            property as
                            <literal>//jguard-swing-example/conf/jGuardUsersPrincipals.xml</literal>
                        </para>
                    </listitem>
                </itemizedlist>
            </sect2>

            <sect2>
                <title>Configure
                    <filename>jGuardPrincipalsPermissions.xml</filename>
                </title>

                <itemizedlist>
                    <listitem>
                        <para>open jGuardPrincipalsPermissions.xml located in
                            /jguard-swing-exampleconf/
                        </para>
                    </listitem>

                    <listitem>
                        <para>modify the FilePermission in the full domain to point to an
                            existing file
                        </para>
                    </listitem>
                </itemizedlist>
            </sect2>

            <sect2>
                <title>Create a new run configuration on jguard-swing-example</title>

                <para>Add as a JVM argument the following (replace M2_REPO and
                    eclipse-worskpace)
                </para>

                <programlisting>Xbootclasspath/a:&lt;M2_REPO&gt;/jguard/jguard-core/1.0.3/jguard-core-1.0.3.jar
                    -Xbootclasspath/a:&lt;M2_REPO&gt;/jguard/jguard-ext/1.0.3/jguard-ext-1.0.3.jar
                    -Xbootclasspath/a:&lt;M2_REPO&gt;/log4j/log4j/1.2.12/log4j-1.2.12.jar
                    -Xbootclasspath/a:&lt;M2_REPO&gt;/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar
                    -Xbootclasspath/a:&lt;M2_REPO&gt;/jaxen/jaxen/1.1-beta-6/jaxen-1.1-beta-6.jar
                    -Xbootclasspath/a:&lt;M2_REPO&gt;/commons-lang/commons-lang/2.1/commons-lang-2.1.jar
                    -Xbootclasspath/a:&lt;M2_REPO&gt;/ehcache/ehcache/1.1/ehcache-1.1.jar
                    -Xbootclasspath/a:&lt;M2_REPO&gt;/commons-jexl/commons-jexl/1.0/commons-jexl-1.0.jar
                    -Djava.security.manager
                    -Dnet.sf.jguard.policy.configuration.file=&lt;eclipse-workspace&gt;/jguard-swing-example/conf/jGuardPolicy.xml
                    -Djava.security.debug=access:failure
                </programlisting>
            </sect2>

            <sect2>
                <title>Run</title>

                <itemizedlist>
                    <listitem>
                        <para>log with<literal>admin/admin</literal>, try to read the file
                            you set in<filename>jGuardPrincipalsPermissions.xml</filename>: It
                            succeeds.
                        </para>
                    </listitem>

                    <listitem>
                        <para>log with<literal>guest/guest</literal>, try to read the file
                            you set in<filename>jGuardPrincipalsPermissions.xml</filename>: It
                            fails.
                        </para>
                    </listitem>
                </itemizedlist>
            </sect2>
        </sect1>
    </chapter>

    <chapter>
        <title>jGuard on JEE applications</title>

        <sect1>
            <title>required libraries</title>

            <itemizedlist>
                <listitem>
                    <para>Java 5 (also known as 5.O) or higher</para>
                </listitem>

                <listitem>
                    <para>JEE 4(also known as j2ee 1.4) or higher</para>
                </listitem>

                <listitem>
                    <para>jguard-core.jar</para>
                </listitem>

                <listitem>
                    <para>jguard-ext.jar</para>
                </listitem>

                <listitem>
                    <para>jguard-jee.jar</para>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>integrate jGuard in your
                <productname>Struts</productname>
                web
                application
            </title>

            <sect2>
                <title>configuration files</title>

                <sect3>
                    <title>configure the
                        <emphasis>technology anchor</emphasis>
                    </title>

                    <para>the technology anchor used in a Struts web aplication is a
                        <classname>javax.servlet.Filter</classname>
                        implementation called
                        <classname>net.sf.jguard.jee.authentication.http.AccessFilter.</classname>
                    </para>

                    <para>To restrict all protected resources, declaration must be
                        located at the top of the servlet filters list in
                        <filename>web.xml</filename>. The related filter-mapping should map
                        all of the Struts protected resources. You do
                        <emphasis>NOT</emphasis>
                        have to include the following in the
                        protected resources set: images, CSS, javascript files, and so
                        on.....
                    </para>

                    <programlisting>&lt;filter&gt;
                        &lt;filter-name&gt;AccessFilter&lt;/filter-name&gt;
                        &lt;description&gt;access filter&lt;/description&gt;
                        &lt;filter-class&gt;net.sf.jguard.jee.authentication.http.AccessFilter&lt;/filter-class&gt;
                        &lt;init-param&gt;
                        &lt;param-name&gt;configurationLocation&lt;/param-name&gt;
                        &lt;param-value&gt;/WEB-INF/conf/jGuard/jGuardFilter.xml&lt;/param-value&gt;
                        &lt;/init-param&gt;
                        &lt;/filter&gt;
                        .....
                        .....
                        &lt;filter-mapping&gt;
                        &lt;filter-name&gt;AccessFilter&lt;/filter-name&gt;
                        &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;
                        &lt;/filter-mapping&gt;</programlisting>

                    <para>
                        <classname>AccessFilter</classname>
                        configuration in the
                        <filename>web.xml</filename>
                        file requires to specify the location
                        of the
                        <filename>jGuardFilter.xml</filename>
                        file like in any
                        technology anchor.
                    </para>
                </sect3>

                <sect3>
                    <title>configure authentication and authorization parts</title>

                    <para>in a web environment,very frequently the java security is not
                        set via a SecurityManager.so, jGuard needs to be installed smoothly
                        and configured at webapp startup. this is done with a dedicated
                        <classname>javax.servlet.ServletContextListener</classname>
                        implmeentation called
                        <classname>net.sf.jguard.listeners.ContextListener</classname>. This
                        implementation will reference the technology-agnostic configuration
                        files called
                        <filename>jGuardAuthentication.xml</filename>
                        and
                        <filename>jGuardAuthorization.xml</filename>.
                    </para>

                    <example>
                        <title>configure jGuard initialization at web application
                            startup
                        </title>

                        <programlisting>........
                            ........
                            &lt;context-param&gt;
                            &lt;param-name&gt;authenticationConfigurationLocation&lt;/param-name&gt;
                            &lt;param-value&gt;/WEB-INF/conf/jGuard/jGuardAuthentication.xml&lt;/param-value&gt;
                            &lt;/context-param&gt;
                            &lt;context-param&gt;
                            &lt;param-name&gt;authorizationConfigurationLocation&lt;/param-name&gt;
                            &lt;param-value&gt;/WEB-INF/conf/jGuard/jGuardAuthorization.xml&lt;/param-value&gt;
                            &lt;/context-param&gt;
                            ........
                            ........
                            &lt;listener&gt;
                            &lt;listener-class&gt;net.sf.jguard.listeners.ContextListener&lt;/listener-class&gt;
                            &lt;/listener&gt;
                            ........
                            ........
                        </programlisting>
                    </example>
                </sect3>

                <sect3>
                    <title>configure
                        <interfacename>
                            <classname>authenticationBindingsFactory</classname>
                        </interfacename>
                        and
                        <classname>AuthorizationBindings</classname>
                        implementations
                    </title>

                    <para>If no one are defined,
                        <classname>net.sf.jguard.jee.authentication.http.HttpServletauthenticationBindingsFactory
                        </classname>
                        and
                        <classname>net.sf.jguard.jee.authorization.HttpServletAuthorizationBindings</classname>
                        are used. Those are specific to any HttpServlet-based framexork like
                        Struts.
                    </para>

                    <para>to define the implementations used, you have to declare them
                        in the init parameters of the technology ancors. for Struts, you can
                        do it in the web.xml like this:
                    </para>

                    <programlisting>........
                        ........
                        &lt;context-param&gt;
                        &lt;param-name&gt;authenticationBindingsFactory&lt;/param-name&gt;
                        &lt;param-value&gt;net.sf.jguard.jee.authentication.http.HttpServletauthenticationBindingsFactory&lt;/param-value&gt;
                        &lt;/context-param&gt;
                        &lt;context-param&gt;
                        &lt;param-name&gt;authorizationBindings&lt;/param-name&gt;
                        &lt;param-value&gt;net.sf.jguard.jee.authorization.HttpServletAuthorizationBindings&lt;/param-value&gt;
                        &lt;/context-param&gt;
                        ........
                        ........
                        ........
                    </programlisting>
                </sect3>

                <sect3>
                    <title>configure specific technology settings</title>

                    <para>to cleanup session related informations when session expires,
                        we configure an HttpSessionListener implementation called
                        net.sf.jguard.listeners.SessionListener.
                    </para>

                    <example>
                        <title>configure the SessionListener</title>

                        <programlisting>........
                            ........
                            &lt;listener&gt;
                            &lt;listener-class&gt;net.sf.jguard.listeners.SessionListener&lt;/listener-class&gt;
                            &lt;/listener&gt;
                            ........
                            ........
                        </programlisting>
                    </example>
                </sect3>
            </sect2>

            <sect2>
                <title>example provided with the jGuard distribution</title>

                <para></para>
            </sect2>
        </sect1>

        <sect1>
            <title>integrate jGuard in your
                <acronym>JSF</acronym>
                web
                application
            </title>

            <sect2>
                <title>configuration files</title>

                <sect3>
                    <title>configure the
                        <emphasis>technology anchor</emphasis>
                    </title>

                    <para>to use JSF, you have to decalre some settings in the web.xml
                        file, including declaring the
                        <classname>javax.faces.webapp.FacesServlet</classname>
                        servlet like
                        this:
                    </para>

                    <programlisting>.....
                        .....
                        &lt;servlet&gt;
                        &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
                        &lt;servlet-class&gt;javax.faces.webapp.FacesServlet&lt;/servlet-class&gt;
                        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
                        &lt;/servlet&gt;
                        .....
                        .....
                    </programlisting>

                    <para>the technology anchor used in a JSF web aplication is a
                        <classname>javax.faces.event.PhaseListener</classname>
                        implementation called
                        <classname>net.sf.jguard.jsf.AccessListener.</classname>
                    </para>

                    <para>JSF configuration is located in a<filename>faces-config.xml
                    </filename>file. In this file, you can declare the
                        <classname>AccessListener</classname>
                        like this:
                    </para>

                    <programlisting>&lt;faces-config&gt;
                        &lt;lifecycle&gt;
                        &lt;phase-listener&gt;net.sf.jguard.jsf.AccessListener&lt;/phase-listener&gt;
                        &lt;/lifecycle&gt;
                        .....
                        .....
                    </programlisting>
                </sect3>

                <sect3>
                    <title>prevent access to internal JSF resources</title>

                    <para>a direct access to resource like<acronym>jsp</acronym>,
                        <acronym>xhtml</acronym>
                        files (if you use
                        <ulink
                                url="https://facelets.dev.java.net/">
                            <productname>facelets</productname>
                        </ulink>
                        ) or any other view
                        rendering technology for your sensible resources need to be
                        prevented, and pass through the
                        <classname>AccessListener</classname>. To prevent, this,
                        <productname>jGuard</productname>
                        provide a special servlet filter
                        which redirect requests against somes unprotected extensions like
                        <emphasis>.jsp</emphasis>
                        , to a protected extension like
                        <emphasis>.faces</emphasis>. You can declare it in your web.xml file
                        like this:
                    </para>

                    <programlisting> &lt;filter&gt;
                        &lt;!-- prevent direct access to *.jsp by redirecting to .jsf --&gt;
                        &lt;filter-name&gt;redirectFilter&lt;/filter-name&gt;
                        &lt;filter-class&gt;net.sf.jguard.jsf.RedirectFilter&lt;/filter-class&gt;
                        &lt;init-param&gt;
                        &lt;param-name&gt;targetExtension&lt;/param-name&gt;
                        &lt;param-value&gt;.jsf&lt;/param-value&gt;
                        &lt;/init-param&gt;
                        &lt;/filter&gt;
                        &lt;filter-mapping&gt;
                        &lt;filter-name&gt;redirectFilter&lt;/filter-name&gt;
                        &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;
                        &lt;/filter-mapping&gt;
                        ........
                        ........
                    </programlisting>
                </sect3>

                <sect3>
                    <title>configure authentication and authorization parts</title>

                    <para>cf section 2.1.2</para>
                </sect3>

                <sect3>
                    <title>configure
                        <interfacename>
                            <classname>authenticationBindingsFactory</classname>
                        </interfacename>
                        and
                        <classname>AuthorizationBindings</classname>
                        implementations
                    </title>

                    <para>JSF relies internally on the HttpServlet. it can configure
                        authenticationBindingsFactory and AuthorizationBindings
                        implementations in a web.xml like this:
                    </para>

                    <programlisting>........
                        ........
                        &lt;context-param&gt;
                        &lt;param-name&gt;authenticationBindingsFactory&lt;/param-name&gt;
                        &lt;param-value&gt;net.sf.jguard.jsf.authentication.JSFauthenticationBindingsFactory&lt;/param-value&gt;
                        &lt;/context-param&gt;
                        &lt;context-param&gt;
                        &lt;param-name&gt;authorizationBindings&lt;/param-name&gt;
                        &lt;param-value&gt;net.sf.jguard.jsf.authorization.JSFAuthorizationBinding&lt;/param-value&gt;
                        &lt;/context-param&gt;
                        ........
                        ........
                        ........
                    </programlisting>

                    <para>if no one are defined,
                        <classname>net.sf.jguard.jsf.authentication.JSFauthenticationBindingsFactory</classname>
                        and
                        <classname>net.sf.jguard.jsf.authorization.JSFAuthorizationBinding</classname>s
                        are used by default.
                    </para>
                </sect3>
            </sect2>

            <sect2>
                <title>example provided with the jGuard distribution</title>

                <para>if no one are defined,
                    <classname>net.sf.jguard.jsf.authentication.JSFauthenticationBindingsFactory</classname>
                    and
                    <classname>net.sf.jguard.jsf.authorization.JSFAuthorizationBinding</classname>s
                    are used by default.
                </para>

                <warning>
                    <para>some special permissions are automatically granted to any
                        users, like the configured
                        <emphasis>AccessDeniedPermission</emphasis>,<emphasis>AuthenticationFailedPermission</emphasis>,
                        <emphasis>authenticationSucceedPermission</emphasis>
                        which maps to a
                        <classname>JSFPermission</classname>
                        (ending in our exampole by
                        <emphasis>.jsf</emphasis>). But JSF has got a behavior which implies
                        that a resource (ending for example by jsf), is an abstract name for
                        a concrete resource like a jsp. Mapping between abstract and
                        concrete resource is done in the faces-config.xml configuraiton
                        file. but this mapping can be done:
                        <itemizedlist>
                            <listitem>
                                <para>by forwarding the call to the jsp (or another view
                                    technology)
                                    <emphasis>only at the server-side
                                    </emphasis>
                                </para>
                            </listitem>

                            <listitem>
                                <para>by redirecting the call to the client pointing to the
                                    view resources directly,
                                    <emphasis>with a client-side and a
                                        server-side interaction
                                    </emphasis>
                                </para>

                                <para>this last option implies to grant access in the guest
                                    role to some view resources like the jsp
                                    <filename>accessDenied.jsp</filename>
                                    if you use this view
                                    technology). this requirement has been applied in the
                                    jGuardPrincipalPermissions.xml file from the
                                    jguard-jsf-example webapp, but is not needed in other examples
                                    (automatically granted).
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </warning>
            </sect2>
        </sect1>

        <sect1>
            <title>integrate in your DWR web application</title>

            <para></para>
        </sect1>

        <sect1>
            <title>jGuard can manage multiple webapps</title>

            <para>[edit] jGuard can manage multiple webapps in the same servlet
                container. It isolates authentication and authorization parts of each
                webapps.
            </para>

            <warning>
                <para>beware that some application servers, for performance tweaking
                    purpose, do not set by default the classloader mechanism to the one
                    defined in the JEE specification; they Sometimes (like
                    <productname>jBoss</productname>
                    3.x,
                    <productname>Websphere</productname>
                    5 and 6.0, but not
                    <productname>jBoss</productname>
                    4.x) set it to the j2se one, and
                    implies that webapps are not isolated: it can enhance performances,
                    but can also create some security and stability issues.
                </para>
            </warning>

            <sect2>
                <title>Authentication isolation</title>

                <para>jGuard's AccessFilter registers automatically authentication
                    part of your web application by its name. So, two webapps with the
                    same name in two servlet containers, but backed with the same
                    database, will create a conflict(those two webapps will edit common
                    data). It is planned to permit to tweak this mechanism by providing a
                    chosen identifier for authentication to be unique, or to share
                    authentication part across multiple webapps.
                </para>
            </sect2>

            <sect2>
                <title>Authorization isolation</title>

                <para>in Java, policy is set globally for the JVM usually. In a JEE
                    application server, multiple applications are hosted on it, in the
                    same JVM (we don't talk about application server clustering). So, like
                    policy is very important in the Java architecture, some bad
                    interactions can occurs between multiple web applications.
                </para>

                <para>if you set the
                    <classname>SecurityManager</classname>
                    and
                    prevent some webapps with related permissions to not override the
                    jGuard policy set, all is fine. But frequently, security manager is
                    not set, and multiple applications need to be securized through
                    <acronym>JAAS</acronym>
                    .
                </para>

                <para>so, since a long time, jGuard ships a
                    <classname>MultipleAppPolicy</classname>, which can handle multiple
                    applications(each web application, has got an isolated part of the
                    policy ). Each web application set this MultipleAppPolicy if not
                    present as the JVM policy, and register the web application to have an
                    isolated part of it. This can be set at runtime. Another 'classic' way
                    is to define the policy as a Java parameter when you launch your
                    applications server, but it is tedious if you don't have a very high
                    security requirement.
                </para>

                <para>jGuard's AccessFilter registers automatically authorization part
                    of your web application by its classloader, which identify uniquely
                    the web application, according to JEE specifications.
                </para>

                <para>it is planned to permit to tweak this mechanism by providing a
                    chosen identifier for authorization to be unique, or to share
                    authorization part across multiple webapps.
                </para>

                <para>Sometimes, some other products relies on different policy
                    implementations and need to replace jGuard policy; also, one
                    requirement to share the policy between multiple web applications
                    (with MultipleAppPolicy), is to put some jars in the 'shared libraries
                    directory' of your application server: some developers can think it is
                    either tedious, or not feasible in their IT environment.
                </para>

                <abstract>
                    <para>jGuard provides a policy (with the '<literal>local</literal>'
                        scope), specific for each web application, which does not interact
                        with a global policy set on the JVM; other webapps, can use their
                        own policy (in their 'local' mode),or use the 'jvm' scope, and
                        cannot reach this policy: this policy is 'local' to the webapp which
                        has set it. this local mode also , does not require any 'shared
                        library directory' mechanism.
                    </para>
                </abstract>
            </sect2>
        </sect1>

        <sect1>
            <title>quick start guide</title>

            <para>This procedure allows quick installation of
                <productname>jGuard</productname>
                and testing of the
                <literal>jGuardExample.war</literal>
                archive provided in the
                distribution. The
                <literal>jGuardExample</literal>
                is configured to work
                with the XmlLoginModule,
                <literal>XmlAuthenticationManager</literal>
                and
                the<literal>XmlAuthorizationManager</literal>.
            </para>

            <sect2>
                <title>requirements</title>

                <itemizedlist>
                    <listitem>
                        <para>java 4 (also known as 1.4) or higher</para>
                    </listitem>

                    <listitem>
                        <para>
                            <acronym>jee</acronym>
                            3(also known as
                            <acronym>j2ee</acronym>
                            1.3)/servlet 2.3 or higher
                        </para>
                    </listitem>
                </itemizedlist>
            </sect2>

            <sect2>
                <title>steps</title>

                <itemizedlist>
                    <listitem>
                        <para>Add the jguard-struts-example.war to your application server
                            (under your
                            <literal><varname>${CATALINA_HOME}</varname>/webapps
                            </literal>
                            directory for
                            <productname>TOMCAT</productname>
                            or
                            <literal><varname>${JBOSS_HOME}</varname>/server/Default/deploy
                            </literal>
                            for<productname>jBoss</productname>)
                        </para>
                    </listitem>

                    <listitem>
                        <para>Start your application server</para>
                    </listitem>

                    <listitem>
                        <para>test jGuard with the provided example, at
                            <uri>http://127.0.0.1:8080/jguard-struts-example</uri>
                        </para>
                    </listitem>
                </itemizedlist>

                <note>
                    <para>There is no requirement by default (the default scope
                        is<literal>'local'</literal>) to put some
                        <productname>jGuard</productname>
                        archives in the "shared libraries"
                        directory of your application server. there is also no requirement
                        to edit any java.policy file. All the security is embedded in your
                        webapp.
                    </para>
                </note>
            </sect2>
        </sect1>

        <sect1>
            <title>taglibs: Integrate jGuard in your jsp pages</title>

            <para>Add<filename>standard.jar</filename>, and
                <filename>jstl.jar</filename>
                in the lib directory and add them to the
                path.
            </para>

            <note>
                <para>All the jguard tags support Expression Language (EL).</para>
            </note>

            <sect2>
                <title>jguard:authorized</title>

                <para>The tag is used to protect page fragments:</para>

                <programlisting>&lt;jguard:authorized uri="/myApplication/SwitchToModule.do?prefix=/forum&amp;page=/ForumPanorama.do"&gt;
                    this text appears only if you are authorized.
                    &lt;/jguard:authorized&gt;</programlisting>

                <para>The text will be rendered by the jsp, only if your user, has at
                    least one role with permission to access the uri
                    <uri>/myApplication/SwitchToModule.do?prefix=/forum&amp;page=/ForumPanorama.do</uri>
                    It is important to note that a fragment is protected with a uri, and
                    not a role. If you update the role permissions, you have not to change
                    the jsp!!!
                </para>
            </sect2>

            <sect2>
                <title>jguard:hasPermission</title>

                <para>The tag , displays content only if the user has the permission
                    defined with this tag. it supports any java.security.Permission
                    subclass. the tag is a specialized version of this tag, dedicated to
                    URLPermission.
                </para>

                <programlisting>&lt;jguard:hasPermission className="java.io.FilePermission" name="/home/myDirectory"
                    actions="read"&gt;
                    content displayed only if the user has got the specified permission
                    &lt;/jguard:hasPermission&gt;</programlisting>
            </sect2>

            <sect2>
                <title>jguard:hasPrincipal</title>

                <para>The tag , displays content only if the user has a role called
                    like the 'principals' value.
                </para>

                <programlisting>&lt;jguard:hasPrincipal principals="admin"&gt;
                    hello!! you have got a role called admin
                    &lt;/jguard:hasPrincipal&gt;</programlisting>

                <para>'principals' attribute can have 1 or more roles splitted by a
                    comma. 'operator' attribute permits to set how the tag works with
                    'roles':
                    <itemizedlist>
                        <listitem>
                            <para>if
                                <literal>'NONE'</literal>
                                is set, tag will display
                                contents only if authenticated user hasn't got any roles in the
                                specified roleSet.
                            </para>
                        </listitem>

                        <listitem>
                            <para>if
                                <literal>'ANY'</literal>
                                is set, tag will display
                                contents only if authenticated user has one or more roles in the
                                specified roleSet.
                            </para>
                        </listitem>

                        <listitem>
                            <para>if
                                <literal>'ALL'</literal>
                                is set, tag will display
                                contents only if authenticated user has all roles in the
                                specified roleSet.
                            </para>
                        </listitem>

                        <listitem>
                            <para>when the 'operator' attribute is not specified, 'ANY' is
                                used by default.
                            </para>

                            <programlisting>&lt;jguard:hasPrincipal principals="admin,restricted" operator="NONE"&gt;
                                hello!! you have got neither a role called admin nor restricted
                                &lt;/jguard:hasPrincipal&gt;</programlisting>

                            <note>
                                <para>If you change the name of the role, you will update the
                                    jsp code, in opposite of the first tag . So, the tag should be
                                    used mostly to protect html links, and should be used to
                                    protect 'functional' content.
                                </para>
                            </note>
                        </listitem>
                    </itemizedlist>
                </para>
            </sect2>

            <sect2>
                <title>jguard:pubCredential</title>

                <para>The tag, display the public credential of a user identified by
                    an "id". If the authenticated user hasn't got this credential, the tag
                    display the default value if the webapp developer use this
                    feature(optional); otherwise, the tag render "".
                </para>

                <programlisting>&lt;jguard:pubCredential id="name" default="noName" /&gt;</programlisting>
            </sect2>

            <sect2>
                <title>jguard:privCredential</title>

                <para>The tag, display the private credential of a user identified by
                    an 'id'. If the authenticated user hasn't got this credential, the tag
                    display the default value if the webapp developer use this
                    feature(optional); Otherwise, the tag render "".
                </para>

                <programlisting>&lt;jguard:privCredential id="login" default="default" /&gt;</programlisting>
            </sect2>
        </sect1>

        <sect1>
            <title>Integrate jGuard with Servlets and other "web" classes (Struts
                Actions, etc.)
            </title>

            <sect2>
                <title>Getting the Subject Object</title>

                <programlisting lang="" language="java">AuthenticationUtils auth=
                    (AuthenticationUtils)request.getSession(true).getAttribute(CoreConstants.AUTHN_UTILS);
                    Subject subject = auth.getSubject();
                </programlisting>
            </sect2>

            <sect2>
                <title>Getting the 'identity' credential</title>

                <para>the 'identity' credential is the credential(i.e user attribute)
                    which identify uniquely the user.
                </para>

                <programlisting language="java">//get the Subject
                    AuthenticationUtils authUtils =
                    (AuthenticationUtils)request.getSession().getAttribute(HttpConstants.AUTH_UTILS);
                    Subject subject = authUtils.getSubject();

                    //get the SubjectTemplate
                    ServletContext context = request.getSession().getServletContext();
                    AuthenticationManager
                    am=(AuthenticationManager).context.getAttribute(CoreConstants.AUTHENTICATION_MANAGER);
                    SubjectTemplate defaultTemplate = am.getDefaultSubjectTemplate();

                    JGuardCredential identityCredential = SubjectUtils.getIdentityCredential(subject,defaultTemplate);
                </programlisting>
            </sect2>
        </sect1>

        <sect1>
            <title>smooth integration with j2ee security methods</title>

            <para>since the 0.70 release, jGuard integrates smoothly with libraries
                that use "j2ee security methods" present in the HttpServletRequest
                class. this integration is realized through the use of a
                HttpServletRequestWrapper, which is transparent for the jGuard
                user.
            </para>

            <sect2>
                <title>
                    <function>String getRemoteUser()</function>
                </title>

                <para>this method return the identifier of the user.jGuard is looking
                    for the 'login' credential, firstly in the public credential set, and
                    if not found, in the private credential set. if there is no credential
                    called 'login', or if the user hasn't got the permission to grab the
                    private credential 'login', this method return null.
                </para>

                <programlisting language="java">public class MyDispatchAction extends DispatchAction{

                    public ActionForward create(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                    HttpServletResponse response){
                    String remoteUser= request.getRemoteUser(); System.out.println("user login is = "+remoteUser);
                    }
                    }
                </programlisting>
            </sect2>

            <sect2>
                <title>
                    <function>Principal getUserPrincipal()</function>
                </title>

                <para>this method returns a special
                    <productname>jGuard</productname>
                    <classname>Principal</classname>
                    implementation :
                    <classname>SubjectAsPrincipal</classname>. when you use the
                    <methodname>getName()</methodname>
                    method of this special
                    <classname>Principal</classname>, it returns a String from a
                    credential called<literal>'name'</literal>, either in the public or
                    private credential set. if no credential is found, it returns null.
                    this special Principal permits to grab the Subject object of the user
                    (you can grab it too in the<classname>HttpSession</classname>), with
                    its
                    <methodname>getSubject()</methodname>
                    method.
                </para>

                <programlisting language="java">public class MyDispatchAction extends DispatchAction{

                    public ActionForward create(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                    HttpServletResponse response) {
                    Principal principal = request.getUserPrincipal(); String name= principal.getName();
                    System.out.println("user name is"+name);
                    SubjectAsPrincipal sap = (SubjectAsPrincipal)principal; Subject subject = sap.getSubject();
                    }
                    }
                </programlisting>
            </sect2>

            <sect2>
                <title>
                    <function>boolean isUserInRole(String role)</function>
                </title>

                <para>his methods return
                    <literal>true</literal>
                    if the user has got
                    one principal with the related name; otherwise, it returns
                    <literal>false</literal>.
                </para>

                <programlisting language="java">public class MyDispatchAction extends DispatchAction{

                    public ActionForward create(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                    HttpServletResponse response) { boolean admin= request.isUserInRole("admin");
                    System.out.println("user is an admin = "+admin);
                    }
                    }
                </programlisting>
            </sect2>
        </sect1>
    </chapter>

    <chapter>
        <title>securing
            <productname>DWR</productname>
            with
            <productname>jGuard</productname>
        </title>

        <para>jGuard
            <productnumber>1.0.0</productnumber>
            and higher support
            securization of webapps using DWR<productnumber>1.x</productnumber>. we
            plan to support also DWR
            <productnumber>2.x</productnumber>
        </para>

        <sect1>
            <title>install
                <productname>DWR</productname>
                in the webapp
            </title>

            <para>in a classic way,to install DWR, you have to insert in your
                <filename>web.xml</filename>
                file, a DWR servlet :
            </para>

            <example>
                <title>installing DWR in your webapp without jGuard
                    securization
                </title>

                <programlisting>   &lt;servlet&gt;
                    &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;
                    &lt;display-name&gt;DWR Servlet&lt;/display-name&gt;
                    &lt;servlet-class&gt;uk.ltd.getahead.dwr.DWRServlet&lt;/servlet-class&gt;
                    &lt;init-param&gt;
                    &lt;param-name&gt;debug&lt;/param-name&gt;
                    &lt;param-value&gt;true&lt;/param-value&gt;
                    &lt;/init-param&gt;
                    &lt;servlet-mapping&gt;
                    &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;
                    &lt;url-pattern&gt;/dwr/*&lt;/url-pattern&gt;
                    &lt;/servlet-mapping&gt; </programlisting>
            </example>
        </sect1>

        <sect1>
            <title>
                <filename>DWR.xml</filename>
            </title>

            <para>DWR permits to access directly to beans hosted on the server in
                the webapp. central configuration file is<filename>DWR.xml</filename>.
                for example, if you want to permit access to the bean
                <classname>net.sf.jguard.example.dwr.Dummy</classname>, you have to
                configure it in
                <filename>DWR.xml</filename>
                like this:
            </para>

            <example>
                <title>
                    <filename>dwr.xml</filename>
                    configuration example
                </title>

                <programlisting>&lt;!DOCTYPE dwr PUBLIC
                    "-//GetAhead Limited//DTD Direct Web Remoting 1.0//EN"
                    "http://www.getahead.ltd.uk/dwr/dwr10.dtd"&gt;

                    &lt;dwr&gt;
                    &lt;allow&gt;
                    &lt;create creator="new" javascript="Demo"&gt;
                    &lt;param name="class" value="net.sf.jguard.example.dwr.Dummy"/&gt;
                    &lt;/create&gt;
                    &lt;/allow&gt;
                    &lt;/dwr&gt;</programlisting>
            </example>
        </sect1>

        <sect1>
            <title>DWR1Permission : a dedicated Permission</title>

            <para>jguard 1.0.0 and higher ships a Permission dedicated to DWR 1.x.
                this permission has got a name and some parameters, like any subclass of
                <classname>java.security.BasicPermisison</classname>:
            </para>

            <itemizedlist>
                <listitem>
                    <para>name</para>

                    <para>used to put on the permission functional meaning</para>
                </listitem>

                <listitem>
                    <para>parameters</para>

                    <itemizedlist>
                        <listitem>
                            <para>first parameter</para>

                            <para>class of the Creator used to instantiate the related
                                protected beans.
                            </para>

                            <para>example:
                                <classname>uk.ltd.getahead.dwr.create.NewCreator</classname>
                            </para>
                        </listitem>

                        <listitem>
                            <para>second parameter: the class of the bean to protect</para>

                            <para>example:
                                <classname>net.sf.jguard.example.dwr.Dummy</classname>
                            </para>
                        </listitem>

                        <listitem>
                            <para>third parameter : the method to protect. example:
                                <literal>getHello</literal>
                                <example>
                                    <title>part of
                                        <filename>jGuardPrincipalPermission.xml</filename>
                                    </title>

                                    <programlisting>&lt;permission&gt;
                                        &lt;name&gt;dummy&lt;/name&gt;
                                        &lt;class&gt;net.sf.jguard.jee.extras.dwr1.DWR1Permission&lt;/class&gt;
                                        &lt;actions&gt;
                                        &lt;action&gt;uk.ltd.getahead.dwr.create.NewCreator&lt;/action&gt;
                                        &lt;action&gt;net.sf.jguard.example.dwr.Dummy&lt;/action&gt;
                                        &lt;action&gt;getHello&lt;/action&gt;
                                        &lt;/actions&gt;
                                        &lt;/permission&gt;</programlisting>
                                </example>
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>DWR1AccessControl</title>

            <para>now, we need to link access to Dummy bean via DWR with jGuard. to
                do that, you have to insert one more parameter of the DWR servlet
                configured previously like this:
            </para>

            <example>
                <title>web.xml with a special init parameter
                    <classname>uk.ltd.getahead.dwr.AccessControl</classname>
                </title>

                <programlisting>   &lt;servlet&gt;
                    &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;
                    &lt;display-name&gt;DWR Servlet&lt;/display-name&gt;
                    &lt;servlet-class&gt;uk.ltd.getahead.dwr.DWRServlet&lt;/servlet-class&gt;
                    &lt;init-param&gt;
                    &lt;param-name&gt;debug&lt;/param-name&gt;
                    &lt;param-value&gt;true&lt;/param-value&gt;
                    &lt;/init-param&gt;
                    <literal>&lt;init-param&gt;
                        &lt;param-name&gt;uk.ltd.getahead.dwr.AccessControl&lt;/param-name&gt;
                        &lt;param-value&gt;net.sf.jguard.jee.extras.dwr1.DWR1AccessControl&lt;/param-value&gt;
                        &lt;/init-param&gt;</literal>
                    &lt;/servlet&gt;
                    &lt;servlet-mapping&gt;
                    &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;
                    &lt;url-pattern&gt;/dwr/*&lt;/url-pattern&gt;
                    &lt;/servlet-mapping&gt;
                </programlisting>
            </example>
        </sect1>

        <sect1>
            <title>what's about jGuard and DWR interactions?</title>

            <para>you have to notice that jGuard is linked with the
                <classname>DWR1AccessControl</classname>. it is used to delegate to
                jGuard authorization check before the user access via a javascript
                instruction to the java Bean declared in the
                <filename>DWR.xml</filename>
                file. but you have to configure jGuard to
                authenticate the user. to do that, accessFilter has to be used. so,
                <classname>AccessFilter</classname>
                and its mapped URIs(like all struts
                actions .do) will be used for Authentication, and authorization checks
                with your traditional web framework(for example Struts). DWR will be
                used for ajax interactions, and will delegate authorization check to
                jGuard. so,in an application hosting Struts and DWR, authentication will
                be done in a URI ending by *.do, and authorization checks will be done
                in uri ending by .do and containing the DWR pattern (see servlet
                mappings configured above).
            </para>
        </sect1>
    </chapter>

    <chapter>
        <title>
            <acronym>JMX</acronym>
            security with
            <productname>jGuard</productname>
        </title>

        <sect1>
            <title>requirements</title>

            <para>
                <acronym>JMX</acronym>
                is a great technology shipped with java 5
                standard edition and higher.
            </para>

            <para>
                <acronym>JMX</acronym>
                is also shipped with
                <acronym>j2ee</acronym>
                1.4 application servers, to expose some of their
                components.
            </para>
        </sect1>

        <sect1>
            <title>what jGuard propose to enhance JMX security</title>

            <itemizedlist>
                <listitem>
                    <para>unified Security</para>

                    <para>jGuard propose to control JMX remote access with the same
                        underlying mechanism than local java access, for a better
                        flexibility and security.
                    </para>
                </listitem>

                <listitem>
                    <para>unified authentication</para>

                    <para>
                        <acronym>JMX</acronym>
                        authentication with jGuard only support
                        login/pasword authentication challenge. other JMX authentications
                        methods like CLIENT-CERT are planned.
                    </para>
                </listitem>

                <listitem>
                    <para>unified authorization</para>

                    <para>Access control is only restricted if you activate the
                        <literal>Security Manager</literal>. This restriction is put by java
                        implementation and not jGuard.if you don't set the Security Manager,
                        authenticated users will have access to ALL
                        <literal>MBeans</literal>. if you set the<literal>Security
                            Manager</literal>, you will have a fine-grained control on
                        <literal>MBeans</literal>
                        exposed. these
                        <literal>MBeans</literal>
                        are protected with
                        <literal>
                            <classname>MBeanPermission</classname>
                        </literal>
                        . you will have read operation on them, restrict changes
                        and so on... these
                        <literal>MBeanPermissions</literal>
                        need to be
                        registered in roles like any other permissions declared in jGuard.
                        only users with roles containing
                        <literal>MBeanPermissions</literal>
                        will have access to them. this powerful feature is unique, and only
                        provided by jGuard.
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>How to start a JMXServer secured with JGuard</title>

            <para>here is an example how to protect your newly created
                MBeanServer:
            </para>

            <example>
                <title>MBeanServer securization example</title>

                <programlisting language="java">//create the MBeanServer
                    MBeanServer mbs = MBeanServerFactory.createMBeanServer(applicationName);
                    //create connector's options
                    Map opt=new HashMap();
                    opt.put(JMXConnectorServer.AUTHENTICATOR,new JGuardJMXAuthenticator());
                    //create JMXConnector
                    JMXConnectorServer connectorServer=JMXConnectorServerFactory.newJMXConnectorServer(url,opt,mbs);
                    connectorServer.start();
                </programlisting>
            </example>
        </sect1>

        <sect1>
            <title>How to start your standalone application with an MBeanServer
                protected with jGuard
            </title>

            <para>The needed property can be separated into 3 parts :bootclasspath
                properties,
                <acronym>JAAS</acronym>
                and
                <acronym>JMX</acronym>
                related
                properties
            </para>

            <itemizedlist>
                <listitem>
                    <para>The
                        <literal>-Xbootclasspath</literal>
                        properties define which
                        libraries must be loaded by the bootclasspath. We need to give the
                        JGuard core library and every other libraries used by JGuard during
                        <classname>SingleAppPolicy</classname>
                        and
                        <classname>XmlLoginModule</classname>
                        execution.
                    </para>

                    <programlisting>-Xbootclasspath/a:jguard-core-1.0.3.jar
                        -Xbootclasspath/a:commons-logging_1.1.0.jar
                        -Xbootclasspath/a:commons-lang-2.1.jar
                        -Xbootclasspath/a:dom4j-1.6.1.jar
                        -Xbootclasspath/a:jaxen-1.1-beta-6.jar
                    </programlisting>
                </listitem>

                <listitem>
                    <para>JAAS and JMX related properties</para>

                    <programlisting>// activate java security
                        -Djava.security.manager
                        -Dcom.sun.management.jmxremote.ssl=false
                        -Dcom.sun.management.jmxremote.port=9004
                        -Dcom.sun.management.jmxremote.password=false
                        -Dcom.sun.management.jmxremote.login.config=your_application_name
                    </programlisting>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>how to reach the JMX connector Server</title>

            <para>you can reach this connector securized by jguard at this
                url:
            </para>

            <programlisting>service:jmx:rmi://localhost/jndi/rmi://rmiRegistryHost:rmiRegistryPort/applicationName
            </programlisting>
        </sect1>

        <sect1>
            <title>Secure JMX connections with JGuard in standalone
                applications
            </title>

            <itemizedlist>
                <listitem>
                    <para>enable the JMX agent for local access</para>

                    <para>you have to set this system parameter when you start
                        JVM:
                    </para>

                    <programlisting>-Dcom.sun.management.jmxremote</programlisting>
                </listitem>

                <listitem>
                    <para>enable monitoring and management from remote systems</para>

                    <para>you have to set this system parameter:</para>

                    <programlisting>-Dcom.sun.management.jmxremote.port=portNum</programlisting>
                </listitem>

                <listitem>
                    <para>password protection for JMX access</para>

                    <para>password protection is enabled by default. you can define it
                        explicitely with this system parameter:
                    </para>

                    <programlisting>-Dcom.sun.management.jmxremote.authenticate=true</programlisting>
                </listitem>

                <listitem>
                    <para>activate JMX on a
                        <productname>Windows</productname>
                        operating
                        system
                    </para>

                    <caution>
                        <para>JMX will not run on
                            <productname>Windows</productname>
                            operatiing system, on disk partitions formatted in
                            <acronym>FAT32</acronym>
                            format. It will only work if the
                            partition you use is formatted in
                            <acronym>NTFS</acronym>
                            format.
                        </para>
                    </caution>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>securing JMX remote access in webapps with jGuard</title>

            <sect2>
                <title>activate JMX security in your webapp</title>

                <para>in your web.xml file, you have to insert this code:</para>

                <programlisting>&lt;context-param&gt;
                    &lt;param-name&gt;enableJMX&lt;/param-name&gt;
                    &lt;param-value&gt;true&lt;/param-value&gt;
                    &lt;/context-param&gt;</programlisting>
            </sect2>

            <sect2>
                <title>optional jGuard JMX-related parameters</title>

                <itemizedlist>
                    <listitem>
                        <para>MBeanServer for connector</para>

                        <para>jguard guard access to MBeans through a connector. you can
                            define which
                            <classname>MBeanServer</classname>
                            will interact with
                            the connector via the key
                            <literal>mbeanServerForConnector</literal>.
                        </para>

                        <para>if no one is defined or if the value is
                            <literal>new</literal>, it will create a MBeanServer.
                        </para>

                        <programlisting>&lt;context-param&gt;
                            &lt;param-name&gt;mbeanServerForConnector&lt;/param-name&gt;
                            &lt;param-value&gt;new&lt;/param-value&gt;
                            &lt;/context-param&gt;</programlisting>

                        <para>if the value is
                            <literal>position#N</literal>
                            ,it will use
                            the
                            <classname>MBeanServer</classname>
                            in the Nth position in the
                            MBeanServer list returned by the
                            <classname>MBeanServerFactory</classname>.
                        </para>

                        <programlisting>&lt;context-param&gt;
                            &lt;param-name&gt;mbeanServerForConnector&lt;/param-name&gt;
                            &lt;param-value&gt;position#4&lt;/param-value&gt;
                            &lt;/context-param&gt;</programlisting>

                        <para>if the value is MBeanServerName#N,it will use the
                            MbeanServer in the Nth position among the MBeanServer list which
                            has got this name returned by the MBeanServerFactory.
                        </para>

                        <programlisting>&lt;context-param&gt;
                            &lt;param-name&gt;mbeanServerForConnector&lt;/param-name&gt;
                            &lt;param-value&gt;myMBeanServerName#0&lt;/param-value&gt;
                            &lt;/context-param&gt;</programlisting>
                    </listitem>

                    <listitem>
                        <para>RMI Registry Host</para>

                        <para>you can define a custom RMI registry host via the key
                            rmiRegistryHost in your web.xml file. if not specified, the
                            default value is localhost.
                        </para>

                        <programlisting>&lt;context-param&gt;
                            &lt;param-name&gt;rmiRegistryHost&lt;/param-name&gt;
                            &lt;param-value&gt;192.168.0.5&lt;/param-value&gt;
                            &lt;/context-param&gt;</programlisting>
                    </listitem>

                    <listitem>
                        <para>RMI registry Port</para>

                        <para>you can define a custom RMI registry port via the key
                            rmiRegistryPort in your web.xml file. if not specified, the
                            default value is 9005.
                        </para>

                        <programlisting>&lt;context-param&gt;
                            &lt;param-name&gt;rmiRegistryPort&lt;/param-name&gt;
                            &lt;param-value&gt;9016&lt;/param-value&gt;
                            &lt;/context-param&gt;</programlisting>
                    </listitem>
                </itemizedlist>
            </sect2>
        </sect1>
    </chapter>

    <chapter>
        <title>jGuard and Object-Relational Mapping tools</title>

        <sect1>
            <title>Overview</title>

            <para>since several years, the use of Object-Relational Mapping
                frameworks is growing. one of the more popular one is<ulink
                        url="http://www.hibernate.org">Hibernate</ulink>. ORMs framework
                provides many useful features. they act as a layer between the object
                world, and the Database world. the facade of the Database world is the
                JDBC Driver. Jguard cannot use hibernate for its purpose, because jGuard
                persists some JDK security classes which does not fullfills Hibernate
                requirements (empty constructor is one of them). so, jGuard use the
                'classical' way to persist its objects, with direct access to database
                through JDBC Driver or JNDI Datasource. but you can use jGuard
                transparently with any ORM including Hibernate!
            </para>
        </sect1>

        <sect1>
            <title>Using jGuard with Hibernate transparently</title>

            <para>Hibernate and jGuard create connections with Driver parameters, or
                Datasource grabbed by JNDI. so, they can act on the same database, to
                manipulate related informations. but how to communicate each others? the
                common scope of Hibernate and jGuard is the object scope: informations
                persisted by Hibernate and informations persisted by jGuard should
                communicate only at the object scope, and not on the SQL scope. jGuard
                manage users, principals/roles,domains, permissions, which are linked
                each others. these objects are very "isolated" in a functional way. so,
                the most common class which will linked to others classes(object
                navigation), is the user class. remind that
                <acronym>CRUD</acronym>
                operations on users, roles, permissions are dedicated to
                AuthenticationManager and AuthorizationManager implementations.
            </para>
        </sect1>

        <sect1>
            <title>example</title>

            <para>if your webapp persists through Hibernate a class called
                Enterprise, which contains some users(persisted by jGuard) contained in
                a Collection, you want to navigate from Enterprise class to users. the
                Enterprise Class contains getter for these users. this class is mapped
                with Hibernate through an Enterprise.hbm.xml, which contains fields
                persisted by Hibernate: don't declare the users field in this
                configuration file. you will have only to implement the getUsers method
                like this:
            </para>

            <programlisting language="java">public Collection getUsers() throws AuthenticationManagerException{
                return AuthenticationManagerFactory.getAuthenticationManager().getUsers();
                }
            </programlisting>
        </sect1>
    </chapter>

    <chapter>
        <title>Import /Export your security data</title>

        <sect1>
            <title>import authentication data</title>

            <para>we try to import another AuthenticationManager in the current
                one.this other AuthenticationManager can be backed by an XML file(in
                this example) or a database.
            </para>

            <programlisting language="java">AuthenticationManager otherAuthNManager = new XMLAuthenticationManager();

                Map options = new HashMap(); options.put(CoreConstants.APPLICATION_NAME,"myAppName");
                options.put(SecurityConstants.AUTHENTICATION_XML_FILE_LOCATION,"/home/user/myfile.xml");

                otherAuthNManager.init(options);

                //retrieve the current AuthenticationManager
                AuthenticationManager myAuthNManager = AuthenticationManagerFactory.getAuthenticationManager();

                //import in the current AuthenticationManager some data
                myAuthNManager.importAuthenticationManager(otherAuthNManager);
            </programlisting>
        </sect1>

        <sect1>
            <title>export authentication data</title>

            <para>several methods exist in
                net.sf.jguard.ext.authentication.manager.AuthenticationUtils class to
                export data in XML way.
            </para>

            <sect2>
                <title>export your AuthenticationManager as an
                    XMLAuthenticationManager
                </title>

                <para>any AuthenticationManager implementation can be exported as an
                    XMLAuthenticationManager:
                </para>

                <programlisting language="java">AuthenticationManager myAuthNManager;
                    XMLAuthenticationManager myXmlAUthNManager =
                    AuthenticationUtils.exportAsXmlAuthorizationManager(myAuthNManager);
                </programlisting>
            </sect2>

            <sect2>
                <title>export your AuthenticationManager as an XML string</title>

                <programlisting language="java">AuthenticationManager myAuthNManager;
                    String myXmlData = AuthenticationUtils.exportAsXMLString(myAuthNManager);
                </programlisting>
            </sect2>

            <sect2>
                <title>export your AuthenticationManager as an XML File</title>

                <programlisting language="java">AuthenticationManager myAuthNManager;
                    String fileLocation="/home/data/myFile.xml";
                    AuthenticationUtils.exportAsXMLFile(myAuthNManager,fileLocation);
                </programlisting>
            </sect2>

            <sect2>
                <title>export your AuthorizationManager as an HTML form in a
                    stream
                </title>

                <programlisting language="java">AuthenticationManager myAuthNManager;
                    OutputStream myOutputStream = yourHttpServletResponse.getOutputStream();
                    AuthenticationUtils.writeAsHTML(myAuthNManager,myOutputStream);
                </programlisting>
            </sect2>

            <sect2>
                <title>export your AuthenticationManager as an XML form in a
                    stream
                </title>

                <programlisting language="java">AuthenticationManager myAuthNManager;
                    OutputStream myOutputStream = yourHttpServletResponse.getOutputStream();
                    String encodingScheme = yourHttpServletResponse.getEncodingScheme();
                    AuthenticationUtils.writeAsXML(myAuthNManager,myOutputStream,encodingScheme);
                </programlisting>
            </sect2>
        </sect1>

        <sect1>
            <title>import authorization data</title>

            <para>we try to import another AuthorizationManager in the current one.
                this other AuthorizationManager can be backed by an XML file(in this
                example) or a database.
            </para>

            <programlisting language="java">AuthorizationManager otherAuthZManager = new XMLAuthorizationManager();

                Map options = new HashMap(); options.put(CoreConstants.APPLICATION_NAME,"myAppName");
                options.put(SecurityConstants.AUTHORIZATION_XML_FILE_LOCATION,"/home/user/myfile.xml");

                otherAuthZManager.init(options);

                //retrieve current AuthorizationManager
                AuthorizationManager myAuthNManager = AuthorizationManagerFactory.getAuthorizationManager();

                //import in the current AuthenticationManager some data
                myAuthNManager.importAuthenticationManager(otherAuthNManager);
            </programlisting>
        </sect1>

        <sect1>
            <title>export authorization data</title>

            <para>several methods exist in
                net.sf.jguard.ext.authorization.manager.AuthorizationUtils class to
                export data in XML way.
            </para>

            <sect2>
                <title>export your AuthorizationManager as an
                    XMLAuthorizationManager
                </title>

                <programlisting language="java">Authorizationmanager myAuthZManager;
                    XMLAuthorizationManager myXmlAUthZManager =
                    AuthorizationUtils.exportAsXmlAuthorizationManager(myAuthZManager);
                </programlisting>
            </sect2>

            <sect2>
                <title>export your AuthorizationManager as an XML string</title>

                <programlisting language="java">Authorizationmanager myAuthZManager;
                    String myXmlData = AuthorizationUtils.exportAsXMLString(myAuthZManager);
                </programlisting>
            </sect2>

            <sect2>
                <title>export your AuthorizationManager as an XML File</title>

                <programlisting language="java">Authorizationmanager myAuthZManager;
                    String fileLocation="/home/data/myFile.xml";
                    AuthorizationUtils.exportAsXMLFile(myAuthZManager,fileLocation);
                </programlisting>
            </sect2>

            <sect2>
                <title>export your AuthorizationManager as an HTML form in a
                    stream
                </title>

                <programlisting language="java">Authorizationmanager myAuthZManager;
                    OutputStream myOutputStream = yourHttpServletResponse.getOutputStream();
                    AuthorizationUtils.writeAsHTML(myAuthZManager,myOutputStream);
                </programlisting>
            </sect2>

            <sect2>
                <title>export your AuthorizationManager as an XML form in a
                    stream
                </title>

                <programlisting language="java">Authorizationmanager myAuthZManager;
                    OutputStream myOutputStream = yourHttpServletResponse.getOutputStream();
                    String encodingScheme = yourHttpServletResponse.getEncodingScheme();
                    AuthorizationUtils.writeAsXML(myAuthZManager,myOutputStream,encodingScheme);
                </programlisting>
            </sect2>
        </sect1>
    </chapter>

    <chapter>
        <title>useful links</title>

        <sect1>
            <title>General Security</title>

            <itemizedlist>
                <listitem>
                    <para>
                        <ulink
                                url="http://www.softpanorama.org/Authentication/rbac.shtml">general
                            information about RBAC model
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.research.ibm.com/journal/sj/412/goodwin.html">Instance-level
                            access control for business-to-business electronic commerce by R.
                            Goodwin, S. F. Goh, and F. Y. Wu on IBM web site
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.joeyoder.com/papers/patterns/Security/appsec.pdf">Architectural
                            Patterns for Enabling Application Security by Joseph Yoder and
                            Jeffrey Barcalow
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.aspectsecurity.com/article/access_control.html">Access
                            Control (aka Authorization) in Your J2EE Application By Jeff
                            Williams
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.cs.washington.edu/education/courses/csep590/06wi/lectures/">courses
                            on Cryptography from the University of Washington
                        </ulink>
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>Authentication</title>

            <itemizedlist>
                <listitem>
                    <para>
                        <ulink
                                url="http://www.ietf.org/rfc/rfc2617.txt?number=2617">RFC 2617 -
                            HTTP Authentication: Basic and Digest Access Authentication
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.ietf.org/rfc/rfc2829.txt?number=2829">RFC 2829 :
                            authentication methods for LDAP
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.zvon.org/tmRFC/RFC2797/Output/index.html">RFC 2797:
                            Certificate Management Messages over CMS
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.hsc.fr/ressources/breves/http_digest.html.fr">Authentication
                            methods overview in http/https (french) by Franck Davy
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.kernel.org/pub/linux/libs/pam/FAQ">Linux PAM FAQ
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.linuxdevcenter.com/pub/a/linux/2001/10/05/PamModules.html">PAM
                            modules by Jennifer Vesperman on linux O' Reilly devcenter
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.linuxdevcenter.com/pub/a/linux/2002/05/02/pam_modules.html">writing
                            PAM modules, Part one by Jennifer Vesperman on linux O' Reilly
                            devcenter
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink url="http://www.kernel.org/pub/linux/libs/pam/">Linux
                            PAM home Page
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="ttp://www.kernel.org/pub/linux/libs/pam/Linux-PAM-html/">Linux-PAM
                            documentation
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.us.kernel.org/pub/linux/libs/pam/modules.html">Linux
                            PAM modules available
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink url="http://jradius-client.sourceforge.net/">a Java
                            Radius Client
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.cra-arc.gc.ca/eservices/pki/ext-cp-digsign-f.html#P1227_100009">
                            certificate profile example
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://java.sun.com/security/jaas/doc/pam.html">Making Login
                            Services Independent of Authentication Technologies by Vipin Samar,
                            Charlie Lai
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink url="http://www.mrchucho.net/index.php?p=36">JBoss
                            linux authentication
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink url="http://www.faqs.org/rfcs/rfc2743.html">RFC
                            2743:Generic Security Service Application Program Interface Version
                            2, Update 1
                        </ulink>
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>Authorization</title>

            <itemizedlist>
                <listitem>
                    <para>
                        <ulink
                                url="http://www.softpanorama.org/Authentication/role_engineering.shtml">Role
                            Engineering and Generic RBAC Theory : explanation of Separation of
                            Duty
                        </ulink>
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>Security in Java</title>

            <itemizedlist>
                <listitem>
                    <para>
                        <ulink
                                url="http://java.sun.com/security/seccodeguide.html">security code
                            guidelines
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.skywayradio.com/tech/j2sdk141/security/spec/security-specTOC.fm.html">
                            java security architecture
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://java.sun.com/j2se/1.5.0/docs/guide/security/jce/HowToImplAJCEProvider.html#MutualAuth">
                            how to verify jar integrity
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://jroller.com/page/maximdim/20050615#propagating_security_context_over_jms">
                            Propagating Security context over JMS in WebLogic
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink url="http://mx4j.sourceforge.net/docs/ch03s10.html">JSR
                            160 Security
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.developer.com/security/article.php/3077421">Introduction
                            to Securing Web Applications with JBoss and LDAP
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.research.ibm.com/journal/sj/412/goodwin.html">Instance-level
                            access control for business-to-business electronic commerce by R.
                            Goodwin, S. F. Goh, and F. Y. Wu
                        </ulink>
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>JAAS related information</title>

            <itemizedlist>
                <listitem>
                    <para>
                        <ulink url="http://java.sun.com/products/jaas/">JAAS official
                            web site
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink url="http://java.sun.com/security/jaas/faq.html">JAAS
                            FAQ
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.javaworld.com/javaworld/jw-09-2002/jw-0913-jaas.html">"All
                            that JAAS :Scalable Java security with JAAS" article on JavaWorld
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.ftponline.com/javapro/2004_06/magazine/features/kjones/">"All
                            that JAAS :Pluggable authentication and authorization services
                            provide many key security benefits for Java applications" article on
                            JavaPro
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="ttp://www.javaworld.com/javaworld/jw-07-2004/jw-0726-security.html">"J2EE
                            security: Container versus custom" on JavaWorld
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink url="http://www.mooreds.com/jaas.html">"Using JAAS for
                            Authorization and Authentication" by Dan Moore
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink url="http://free.tagish.net/jaas/doc.html">Open source
                            login modules implementations by Andy Amstrong
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.javageeks.com/Papers/JavaPolicy/index.html">When
                            "java.policy" Just Isn't Good Enough by Ted Neward
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.sys-con.com/story/?storyid=37699.">Extending JAAS by
                            Guosheng Huang
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.ibm.com/developerworks/java/library/j-jaas/">Extend
                            JAAS for class instance-level authorization by Carlos A. Fonseca
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://as400bks.rochester.ibm.com/pubs/html/as400/v4r5/ic2924/info/java/rzaha/jaasbase.htm">
                            JAAS related informations dedicated to AS/400 systems:
                            configuration, specific JAAS implementation...
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://java.sun.com/security/javaone/2003/2236-JAASJGSS.pdf">implementing
                            Security using JAAS and Java GSS-API by Charlie Lai and Seema
                            Malkani
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://java.sun.com/security/jaas/doc/acsac.html">white paper
                            intitled 'USER AUTHENTICATION AND AUTHORIZATION IN THE JAVA(TM)
                            PLATFORM" by Charlie Lai, Li Gong, Larry Koved, Anthony Nadalin, and
                            Roland Schemers
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://java.sun.com/security/jaas/doc/api.html">JAAS
                            Developer's Guide by SUN
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="ftp://ftp.oreilly.com/pub/conference/java2001/Rich_Jaas.pdf">JAAS
                            by Bruce A Rich,Java Security Lead IBM/Tivoli Systems
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://help.sap.com/saphelp_webas630/helpdata/en/6c/5da94fdd594791bc0f6bfdfad4d36e/content.htm">
                            Http Callback classes in SAP library
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink url="http://www.bablokb.de/jaas/">JAAS-compliant
                            authentication-provider using the shadow-password system of Linux.
                            It might also work for other dialects of Unix.
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="https://jjguidelines.dev.java.net/book/html/apbs08.html">Java
                            &amp; J2EE Conventions, Guidelines and Best Practices document:JAAS
                            rules
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://bofriis.dk/index.html?http://bofriis.dk/spnego/spnego_jaasclient.html">Using
                            JAAS and SPNEGO/Kerberos to single sign-on from fat java clients
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink url="http://www.mywelt.net/?q=node/1585">JAAS
                            presentation
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://alblue.blogspot.com/2004/10/all-that-jaas.html">all that
                            JAAS from AlBlue's weblog
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.kopz.org/public/documents/tomcat/jaasintomcat.html">JAAS
                            example on tomcat
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www-106.ibm.com/developerworks/library/j-javaauth/?ca=dnt-518">Java
                            authorization internals: A guided tour of the Java 2 platform and
                            JAAS authorization architectures by Abhijit Belapurkar
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.urbancode.com/download/presentations/">Urban code
                            presentations
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink url="http://java.sys-con.com/read/37699.htm">Extending
                            JAAS by Guosheng Huang
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://today.java.net/pub/a/today/2006/09/14/using-jaas-in-ee-and-soa.html">Using
                            JAAS in Java EE and SOA Environments by Denis Pilipchuk
                        </ulink>
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>java topics which can be interesting for jGuard</title>

            <itemizedlist>
                <listitem>
                    <para>
                        <ulink
                                url="http://www-128.ibm.com/developerworks/java/library/j-cwt05125/index.html?ca=drs-">
                            Classworking toolkit: ASM classworking
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://www.onjava.com/pub/a/onjava/2001/04/12/signing_jar.html?page=1">
                            Programmatically Signing JAR Files by Raffi Krikorian
                        </ulink>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <ulink
                                url="http://kumiki.c.u-tokyo.ac.jp/~ichiyama/cgi-bin/hiki/java.lang.instrument.html">
                            instrumentation example (java.lang.instrument package)
                        </ulink>
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>
    </chapter>

    <chapter>
        <title>FAQ</title>

        <itemizedlist>
            <listitem>
                <para>How does work authentication in jGuard?</para>

                <para>jGuard authenticates users (with the help of
                    <acronym>JAAS</acronym>), through a stack of LoginModules.
                </para>
            </listitem>

            <listitem>
                <para>How can I configure jGuard to authenticate against an
                    <acronym>LDAP</acronym>
                    directory?
                </para>

                <para>jGuard provides some convenient LoginModules, including a
                    <classname>JNDILoginModule</classname>
                    since
                    <productname>jGuard</productname>
                    <productnumber>1.0 beta
                        2</productnumber>. So, the solution is either to use the loginModule
                    provided in the jGuard distribution, or to use a LoginModule provided
                    by sun directly with the Java Runtime Environment(JRE). to do it, you
                    have only to declare in the 'loginmodules' field this one:
                    <classname>com.sun.security.auth.module.JndiLoginModule</classname>
                    note that this loginmodule connect to
                    <acronym>LDAP</acronym>
                    through
                    the great abstraction layer called<acronym>JNDI</acronym>. more
                    details can be reached directly at the corresponding page It exists
                    others LoginModule implementations which do the same stuff. the only
                    requirement is only to implements the LoginModule interface.
                </para>
            </listitem>

            <listitem>
                <para>How can I configure jGuard to authenticate against a Kerberos
                    system?
                </para>

                <para>you can configure jGuard to authenticate through a Kerberos
                    system. the loginModule to use is the one provided by sun:
                    <classname>com.sun.security.auth.module.Krb5LoginModule</classname>
                </para>
            </listitem>

            <listitem>
                <para>How can I configure jGuard to authenticate against the
                    NT/Unix/Solaris host system?
                </para>

                <para>jGuard can authenticate with any provided LoginModules
                    implementations.
                    <ulink
                            url="http://java.sun.com/j2se/1.4.2/docs/guide/security/jaas/spec/com/sun/security/auth/module/package-summary.html">
                        here
                    </ulink>
                    are the one provided by Sun.
                </para>
            </listitem>

            <listitem>
                <para>How can I add database support to the authorization
                    system?
                </para>

                <para>Since the
                    <productnumber>0.70</productnumber>
                    release, you have
                    to use the
                    <classname>JdbcAuthorizationManager</classname>
                    and
                    configure it through
                    <filename>jGuardConfiguration.xml</filename>
                    file
                    to set the right driver and
                    <acronym>jdbc</acronym>
                    settings in order
                    to and provide authorization.
                    <filename>yourdatabaseName.properties</filename>
                    file contains
                    specific sql queries.
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>AccessFilter</classname>
                    automatically tries to log
                    me in as 'guest'.Why should there be a "default" user in
                    <productname>jGuard</productname>? Isn't that a security issue?
                </para>

                <para>jGuard automatically authenticate you as 'guest' by default.
                    it's not a security issue, but a design choice.But to fulfills your
                    security requirements, you can configure that guest (unauthorized
                    users), hasn't got access to your protected pages. how to do it? =&gt;
                    configure the 'guest' role with no permissions. the guest user will
                    only have access to login page and access denied page(access is always
                    grant to these pages).
                </para>
            </listitem>

            <listitem>
                <para>Can i create a permission not bound to a Domain?</para>

                <para>
                    <quote>I didn't want to associate a domain to the permission
                        because this permission is alone in a functional point of view.
                    </quote>
                    All permission must belong to a domain. To solve your
                    problem, it is suitable to create a '<emphasis>default</emphasis>'
                    domain which will regroup "<emphasis>orphan permissions</emphasis>".
                    but it is not mandatory to assign this domain to a role (this domain
                    has no "<emphasis>functional meaning</emphasis>"). You will only
                    assign some permissions of this domain to the role.The reason to
                    always assign a domain to a permission, is to be sure that the sum of
                    permissions of all domains contains all the permissions declared in
                    the application.
                </para>
            </listitem>

            <listitem>
                <para>What is the role of<varname>logonProcessURI</varname>?
                </para>

                <para>
                    <varname>logonProcessURI</varname>
                    is the way jGuard receive
                    credentials through FORM authentication. The html form which contains
                    your login and password will send this information to this special URI
                    interecepted by jGuard.jGuard will evaluate them and authenticate you.
                    It will redirect you to the convenient URI. So, this special URI does
                    not point to a dedicated page.
                </para>
            </listitem>
        </itemizedlist>
    </chapter>
</book>
